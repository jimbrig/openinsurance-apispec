# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Driver(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, gender: str=None, driver_dob: date=None, is_primary_driver: bool=None, licence: str=None, no_claims_discount: float=None, conviction: str=None, medical_conditon: str=None, loading: float=None, is_blue_badge: bool=None, non_motor_conviction: str=None, work_status: str=None, occupation: str=None):  # noqa: E501
        """Driver - a model defined in Swagger

        :param name: The name of this Driver.  # noqa: E501
        :type name: str
        :param gender: The gender of this Driver.  # noqa: E501
        :type gender: str
        :param driver_dob: The driver_dob of this Driver.  # noqa: E501
        :type driver_dob: date
        :param is_primary_driver: The is_primary_driver of this Driver.  # noqa: E501
        :type is_primary_driver: bool
        :param licence: The licence of this Driver.  # noqa: E501
        :type licence: str
        :param no_claims_discount: The no_claims_discount of this Driver.  # noqa: E501
        :type no_claims_discount: float
        :param conviction: The conviction of this Driver.  # noqa: E501
        :type conviction: str
        :param medical_conditon: The medical_conditon of this Driver.  # noqa: E501
        :type medical_conditon: str
        :param loading: The loading of this Driver.  # noqa: E501
        :type loading: float
        :param is_blue_badge: The is_blue_badge of this Driver.  # noqa: E501
        :type is_blue_badge: bool
        :param non_motor_conviction: The non_motor_conviction of this Driver.  # noqa: E501
        :type non_motor_conviction: str
        :param work_status: The work_status of this Driver.  # noqa: E501
        :type work_status: str
        :param occupation: The occupation of this Driver.  # noqa: E501
        :type occupation: str
        """
        self.swagger_types = {
            'name': str,
            'gender': str,
            'driver_dob': date,
            'is_primary_driver': bool,
            'licence': str,
            'no_claims_discount': float,
            'conviction': str,
            'medical_conditon': str,
            'loading': float,
            'is_blue_badge': bool,
            'non_motor_conviction': str,
            'work_status': str,
            'occupation': str
        }

        self.attribute_map = {
            'name': 'name',
            'gender': 'gender',
            'driver_dob': 'driverDOB',
            'is_primary_driver': 'isPrimaryDriver',
            'licence': 'licence',
            'no_claims_discount': 'noClaimsDiscount',
            'conviction': 'conviction',
            'medical_conditon': 'medicalConditon',
            'loading': 'loading',
            'is_blue_badge': 'isBlueBadge',
            'non_motor_conviction': 'nonMotorConviction',
            'work_status': 'workStatus',
            'occupation': 'occupation'
        }
        self._name = name
        self._gender = gender
        self._driver_dob = driver_dob
        self._is_primary_driver = is_primary_driver
        self._licence = licence
        self._no_claims_discount = no_claims_discount
        self._conviction = conviction
        self._medical_conditon = medical_conditon
        self._loading = loading
        self._is_blue_badge = is_blue_badge
        self._non_motor_conviction = non_motor_conviction
        self._work_status = work_status
        self._occupation = occupation

    @classmethod
    def from_dict(cls, dikt) -> 'Driver':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Driver of this Driver.  # noqa: E501
        :rtype: Driver
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Driver.


        :return: The name of this Driver.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Driver.


        :param name: The name of this Driver.
        :type name: str
        """

        self._name = name

    @property
    def gender(self) -> str:
        """Gets the gender of this Driver.


        :return: The gender of this Driver.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this Driver.


        :param gender: The gender of this Driver.
        :type gender: str
        """

        self._gender = gender

    @property
    def driver_dob(self) -> date:
        """Gets the driver_dob of this Driver.


        :return: The driver_dob of this Driver.
        :rtype: date
        """
        return self._driver_dob

    @driver_dob.setter
    def driver_dob(self, driver_dob: date):
        """Sets the driver_dob of this Driver.


        :param driver_dob: The driver_dob of this Driver.
        :type driver_dob: date
        """

        self._driver_dob = driver_dob

    @property
    def is_primary_driver(self) -> bool:
        """Gets the is_primary_driver of this Driver.


        :return: The is_primary_driver of this Driver.
        :rtype: bool
        """
        return self._is_primary_driver

    @is_primary_driver.setter
    def is_primary_driver(self, is_primary_driver: bool):
        """Sets the is_primary_driver of this Driver.


        :param is_primary_driver: The is_primary_driver of this Driver.
        :type is_primary_driver: bool
        """

        self._is_primary_driver = is_primary_driver

    @property
    def licence(self) -> str:
        """Gets the licence of this Driver.


        :return: The licence of this Driver.
        :rtype: str
        """
        return self._licence

    @licence.setter
    def licence(self, licence: str):
        """Sets the licence of this Driver.


        :param licence: The licence of this Driver.
        :type licence: str
        """

        self._licence = licence

    @property
    def no_claims_discount(self) -> float:
        """Gets the no_claims_discount of this Driver.


        :return: The no_claims_discount of this Driver.
        :rtype: float
        """
        return self._no_claims_discount

    @no_claims_discount.setter
    def no_claims_discount(self, no_claims_discount: float):
        """Sets the no_claims_discount of this Driver.


        :param no_claims_discount: The no_claims_discount of this Driver.
        :type no_claims_discount: float
        """

        self._no_claims_discount = no_claims_discount

    @property
    def conviction(self) -> str:
        """Gets the conviction of this Driver.


        :return: The conviction of this Driver.
        :rtype: str
        """
        return self._conviction

    @conviction.setter
    def conviction(self, conviction: str):
        """Sets the conviction of this Driver.


        :param conviction: The conviction of this Driver.
        :type conviction: str
        """

        self._conviction = conviction

    @property
    def medical_conditon(self) -> str:
        """Gets the medical_conditon of this Driver.


        :return: The medical_conditon of this Driver.
        :rtype: str
        """
        return self._medical_conditon

    @medical_conditon.setter
    def medical_conditon(self, medical_conditon: str):
        """Sets the medical_conditon of this Driver.


        :param medical_conditon: The medical_conditon of this Driver.
        :type medical_conditon: str
        """

        self._medical_conditon = medical_conditon

    @property
    def loading(self) -> float:
        """Gets the loading of this Driver.


        :return: The loading of this Driver.
        :rtype: float
        """
        return self._loading

    @loading.setter
    def loading(self, loading: float):
        """Sets the loading of this Driver.


        :param loading: The loading of this Driver.
        :type loading: float
        """

        self._loading = loading

    @property
    def is_blue_badge(self) -> bool:
        """Gets the is_blue_badge of this Driver.


        :return: The is_blue_badge of this Driver.
        :rtype: bool
        """
        return self._is_blue_badge

    @is_blue_badge.setter
    def is_blue_badge(self, is_blue_badge: bool):
        """Sets the is_blue_badge of this Driver.


        :param is_blue_badge: The is_blue_badge of this Driver.
        :type is_blue_badge: bool
        """

        self._is_blue_badge = is_blue_badge

    @property
    def non_motor_conviction(self) -> str:
        """Gets the non_motor_conviction of this Driver.


        :return: The non_motor_conviction of this Driver.
        :rtype: str
        """
        return self._non_motor_conviction

    @non_motor_conviction.setter
    def non_motor_conviction(self, non_motor_conviction: str):
        """Sets the non_motor_conviction of this Driver.


        :param non_motor_conviction: The non_motor_conviction of this Driver.
        :type non_motor_conviction: str
        """

        self._non_motor_conviction = non_motor_conviction

    @property
    def work_status(self) -> str:
        """Gets the work_status of this Driver.


        :return: The work_status of this Driver.
        :rtype: str
        """
        return self._work_status

    @work_status.setter
    def work_status(self, work_status: str):
        """Sets the work_status of this Driver.


        :param work_status: The work_status of this Driver.
        :type work_status: str
        """

        self._work_status = work_status

    @property
    def occupation(self) -> str:
        """Gets the occupation of this Driver.


        :return: The occupation of this Driver.
        :rtype: str
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation: str):
        """Sets the occupation of this Driver.


        :param occupation: The occupation of this Driver.
        :type occupation: str
        """

        self._occupation = occupation
