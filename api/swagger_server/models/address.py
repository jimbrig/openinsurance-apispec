# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Address(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, building: str=None, street_name: str=None, city: str=None, state: str=None, country: str=None, postal_code: str=None, _3_word_address: str=None):  # noqa: E501
        """Address - a model defined in Swagger

        :param building: The building of this Address.  # noqa: E501
        :type building: str
        :param street_name: The street_name of this Address.  # noqa: E501
        :type street_name: str
        :param city: The city of this Address.  # noqa: E501
        :type city: str
        :param state: The state of this Address.  # noqa: E501
        :type state: str
        :param country: The country of this Address.  # noqa: E501
        :type country: str
        :param postal_code: The postal_code of this Address.  # noqa: E501
        :type postal_code: str
        :param _3_word_address: The _3_word_address of this Address.  # noqa: E501
        :type _3_word_address: str
        """
        self.swagger_types = {
            'building': str,
            'street_name': str,
            'city': str,
            'state': str,
            'country': str,
            'postal_code': str,
            '_3_word_address': str
        }

        self.attribute_map = {
            'building': 'building',
            'street_name': 'streetName',
            'city': 'city',
            'state': 'state',
            'country': 'country',
            'postal_code': 'postal_code',
            '_3_word_address': '3_word_address'
        }
        self._building = building
        self._street_name = street_name
        self._city = city
        self._state = state
        self._country = country
        self._postal_code = postal_code
        self.__3_word_address = _3_word_address

    @classmethod
    def from_dict(cls, dikt) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The address of this Address.  # noqa: E501
        :rtype: Address
        """
        return util.deserialize_model(dikt, cls)

    @property
    def building(self) -> str:
        """Gets the building of this Address.


        :return: The building of this Address.
        :rtype: str
        """
        return self._building

    @building.setter
    def building(self, building: str):
        """Sets the building of this Address.


        :param building: The building of this Address.
        :type building: str
        """

        self._building = building

    @property
    def street_name(self) -> str:
        """Gets the street_name of this Address.


        :return: The street_name of this Address.
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name: str):
        """Sets the street_name of this Address.


        :param street_name: The street_name of this Address.
        :type street_name: str
        """

        self._street_name = street_name

    @property
    def city(self) -> str:
        """Gets the city of this Address.


        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this Address.


        :param city: The city of this Address.
        :type city: str
        """

        self._city = city

    @property
    def state(self) -> str:
        """Gets the state of this Address.


        :return: The state of this Address.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this Address.


        :param state: The state of this Address.
        :type state: str
        """

        self._state = state

    @property
    def country(self) -> str:
        """Gets the country of this Address.


        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this Address.


        :param country: The country of this Address.
        :type country: str
        """

        self._country = country

    @property
    def postal_code(self) -> str:
        """Gets the postal_code of this Address.


        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code: str):
        """Sets the postal_code of this Address.


        :param postal_code: The postal_code of this Address.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def _3_word_address(self) -> str:
        """Gets the _3_word_address of this Address.


        :return: The _3_word_address of this Address.
        :rtype: str
        """
        return self.__3_word_address

    @_3_word_address.setter
    def _3_word_address(self, _3_word_address: str):
        """Sets the _3_word_address of this Address.


        :param _3_word_address: The _3_word_address of this Address.
        :type _3_word_address: str
        """

        self.__3_word_address = _3_word_address
