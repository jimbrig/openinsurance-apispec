# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Personal(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, first_name: str=None, last_name: str=None, salutation: str=None, nationality: str=None, gender: str=None, dob: date=None, email: str=None, mobile_phone: str=None, phone: str=None, address: str=None, id_type: str=None, id_number: str=None, occupation: str=None, policyholder_preferred_language: str=None):  # noqa: E501
        """Personal - a model defined in Swagger

        :param first_name: The first_name of this Personal.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this Personal.  # noqa: E501
        :type last_name: str
        :param salutation: The salutation of this Personal.  # noqa: E501
        :type salutation: str
        :param nationality: The nationality of this Personal.  # noqa: E501
        :type nationality: str
        :param gender: The gender of this Personal.  # noqa: E501
        :type gender: str
        :param dob: The dob of this Personal.  # noqa: E501
        :type dob: date
        :param email: The email of this Personal.  # noqa: E501
        :type email: str
        :param mobile_phone: The mobile_phone of this Personal.  # noqa: E501
        :type mobile_phone: str
        :param phone: The phone of this Personal.  # noqa: E501
        :type phone: str
        :param address: The address of this Personal.  # noqa: E501
        :type address: str
        :param id_type: The id_type of this Personal.  # noqa: E501
        :type id_type: str
        :param id_number: The id_number of this Personal.  # noqa: E501
        :type id_number: str
        :param occupation: The occupation of this Personal.  # noqa: E501
        :type occupation: str
        :param policyholder_preferred_language: The policyholder_preferred_language of this Personal.  # noqa: E501
        :type policyholder_preferred_language: str
        """
        self.swagger_types = {
            'first_name': str,
            'last_name': str,
            'salutation': str,
            'nationality': str,
            'gender': str,
            'dob': date,
            'email': str,
            'mobile_phone': str,
            'phone': str,
            'address': str,
            'id_type': str,
            'id_number': str,
            'occupation': str,
            'policyholder_preferred_language': str
        }

        self.attribute_map = {
            'first_name': 'firstName',
            'last_name': 'lastName',
            'salutation': 'salutation',
            'nationality': 'nationality',
            'gender': 'gender',
            'dob': 'dob',
            'email': 'email',
            'mobile_phone': 'mobilePhone',
            'phone': 'phone',
            'address': 'address',
            'id_type': 'idType',
            'id_number': 'idNumber',
            'occupation': 'occupation',
            'policyholder_preferred_language': 'policyholderPreferredLanguage'
        }
        self._first_name = first_name
        self._last_name = last_name
        self._salutation = salutation
        self._nationality = nationality
        self._gender = gender
        self._dob = dob
        self._email = email
        self._mobile_phone = mobile_phone
        self._phone = phone
        self._address = address
        self._id_type = id_type
        self._id_number = id_number
        self._occupation = occupation
        self._policyholder_preferred_language = policyholder_preferred_language

    @classmethod
    def from_dict(cls, dikt) -> 'Personal':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Personal of this Personal.  # noqa: E501
        :rtype: Personal
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self) -> str:
        """Gets the first_name of this Personal.


        :return: The first_name of this Personal.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this Personal.


        :param first_name: The first_name of this Personal.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this Personal.


        :return: The last_name of this Personal.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this Personal.


        :param last_name: The last_name of this Personal.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def salutation(self) -> str:
        """Gets the salutation of this Personal.


        :return: The salutation of this Personal.
        :rtype: str
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation: str):
        """Sets the salutation of this Personal.


        :param salutation: The salutation of this Personal.
        :type salutation: str
        """

        self._salutation = salutation

    @property
    def nationality(self) -> str:
        """Gets the nationality of this Personal.


        :return: The nationality of this Personal.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality: str):
        """Sets the nationality of this Personal.


        :param nationality: The nationality of this Personal.
        :type nationality: str
        """

        self._nationality = nationality

    @property
    def gender(self) -> str:
        """Gets the gender of this Personal.


        :return: The gender of this Personal.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this Personal.


        :param gender: The gender of this Personal.
        :type gender: str
        """

        self._gender = gender

    @property
    def dob(self) -> date:
        """Gets the dob of this Personal.


        :return: The dob of this Personal.
        :rtype: date
        """
        return self._dob

    @dob.setter
    def dob(self, dob: date):
        """Sets the dob of this Personal.


        :param dob: The dob of this Personal.
        :type dob: date
        """

        self._dob = dob

    @property
    def email(self) -> str:
        """Gets the email of this Personal.


        :return: The email of this Personal.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Personal.


        :param email: The email of this Personal.
        :type email: str
        """

        self._email = email

    @property
    def mobile_phone(self) -> str:
        """Gets the mobile_phone of this Personal.


        :return: The mobile_phone of this Personal.
        :rtype: str
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone: str):
        """Sets the mobile_phone of this Personal.


        :param mobile_phone: The mobile_phone of this Personal.
        :type mobile_phone: str
        """

        self._mobile_phone = mobile_phone

    @property
    def phone(self) -> str:
        """Gets the phone of this Personal.


        :return: The phone of this Personal.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this Personal.


        :param phone: The phone of this Personal.
        :type phone: str
        """

        self._phone = phone

    @property
    def address(self) -> str:
        """Gets the address of this Personal.


        :return: The address of this Personal.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this Personal.


        :param address: The address of this Personal.
        :type address: str
        """

        self._address = address

    @property
    def id_type(self) -> str:
        """Gets the id_type of this Personal.


        :return: The id_type of this Personal.
        :rtype: str
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type: str):
        """Sets the id_type of this Personal.


        :param id_type: The id_type of this Personal.
        :type id_type: str
        """

        self._id_type = id_type

    @property
    def id_number(self) -> str:
        """Gets the id_number of this Personal.


        :return: The id_number of this Personal.
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number: str):
        """Sets the id_number of this Personal.


        :param id_number: The id_number of this Personal.
        :type id_number: str
        """

        self._id_number = id_number

    @property
    def occupation(self) -> str:
        """Gets the occupation of this Personal.


        :return: The occupation of this Personal.
        :rtype: str
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation: str):
        """Sets the occupation of this Personal.


        :param occupation: The occupation of this Personal.
        :type occupation: str
        """

        self._occupation = occupation

    @property
    def policyholder_preferred_language(self) -> str:
        """Gets the policyholder_preferred_language of this Personal.


        :return: The policyholder_preferred_language of this Personal.
        :rtype: str
        """
        return self._policyholder_preferred_language

    @policyholder_preferred_language.setter
    def policyholder_preferred_language(self, policyholder_preferred_language: str):
        """Sets the policyholder_preferred_language of this Personal.


        :param policyholder_preferred_language: The policyholder_preferred_language of this Personal.
        :type policyholder_preferred_language: str
        """

        self._policyholder_preferred_language = policyholder_preferred_language
