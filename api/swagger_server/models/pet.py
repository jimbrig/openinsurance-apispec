# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Pet(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, pet_name: str=None, address: str=None, pet_kind: str=None, age: float=None, purebred: bool=None, pet_breed: str=None, size: float=None, description: str=None, reimbursement: float=None):  # noqa: E501
        """Pet - a model defined in Swagger

        :param pet_name: The pet_name of this Pet.  # noqa: E501
        :type pet_name: str
        :param address: The address of this Pet.  # noqa: E501
        :type address: str
        :param pet_kind: The pet_kind of this Pet.  # noqa: E501
        :type pet_kind: str
        :param age: The age of this Pet.  # noqa: E501
        :type age: float
        :param purebred: The purebred of this Pet.  # noqa: E501
        :type purebred: bool
        :param pet_breed: The pet_breed of this Pet.  # noqa: E501
        :type pet_breed: str
        :param size: The size of this Pet.  # noqa: E501
        :type size: float
        :param description: The description of this Pet.  # noqa: E501
        :type description: str
        :param reimbursement: The reimbursement of this Pet.  # noqa: E501
        :type reimbursement: float
        """
        self.swagger_types = {
            'pet_name': str,
            'address': str,
            'pet_kind': str,
            'age': float,
            'purebred': bool,
            'pet_breed': str,
            'size': float,
            'description': str,
            'reimbursement': float
        }

        self.attribute_map = {
            'pet_name': 'petName',
            'address': 'address',
            'pet_kind': 'petKind',
            'age': 'age',
            'purebred': 'purebred',
            'pet_breed': 'petBreed',
            'size': 'size',
            'description': 'description',
            'reimbursement': 'reimbursement'
        }
        self._pet_name = pet_name
        self._address = address
        self._pet_kind = pet_kind
        self._age = age
        self._purebred = purebred
        self._pet_breed = pet_breed
        self._size = size
        self._description = description
        self._reimbursement = reimbursement

    @classmethod
    def from_dict(cls, dikt) -> 'Pet':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The pet of this Pet.  # noqa: E501
        :rtype: Pet
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pet_name(self) -> str:
        """Gets the pet_name of this Pet.


        :return: The pet_name of this Pet.
        :rtype: str
        """
        return self._pet_name

    @pet_name.setter
    def pet_name(self, pet_name: str):
        """Sets the pet_name of this Pet.


        :param pet_name: The pet_name of this Pet.
        :type pet_name: str
        """

        self._pet_name = pet_name

    @property
    def address(self) -> str:
        """Gets the address of this Pet.


        :return: The address of this Pet.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this Pet.


        :param address: The address of this Pet.
        :type address: str
        """

        self._address = address

    @property
    def pet_kind(self) -> str:
        """Gets the pet_kind of this Pet.


        :return: The pet_kind of this Pet.
        :rtype: str
        """
        return self._pet_kind

    @pet_kind.setter
    def pet_kind(self, pet_kind: str):
        """Sets the pet_kind of this Pet.


        :param pet_kind: The pet_kind of this Pet.
        :type pet_kind: str
        """

        self._pet_kind = pet_kind

    @property
    def age(self) -> float:
        """Gets the age of this Pet.


        :return: The age of this Pet.
        :rtype: float
        """
        return self._age

    @age.setter
    def age(self, age: float):
        """Sets the age of this Pet.


        :param age: The age of this Pet.
        :type age: float
        """

        self._age = age

    @property
    def purebred(self) -> bool:
        """Gets the purebred of this Pet.


        :return: The purebred of this Pet.
        :rtype: bool
        """
        return self._purebred

    @purebred.setter
    def purebred(self, purebred: bool):
        """Sets the purebred of this Pet.


        :param purebred: The purebred of this Pet.
        :type purebred: bool
        """

        self._purebred = purebred

    @property
    def pet_breed(self) -> str:
        """Gets the pet_breed of this Pet.


        :return: The pet_breed of this Pet.
        :rtype: str
        """
        return self._pet_breed

    @pet_breed.setter
    def pet_breed(self, pet_breed: str):
        """Sets the pet_breed of this Pet.


        :param pet_breed: The pet_breed of this Pet.
        :type pet_breed: str
        """

        self._pet_breed = pet_breed

    @property
    def size(self) -> float:
        """Gets the size of this Pet.


        :return: The size of this Pet.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size: float):
        """Sets the size of this Pet.


        :param size: The size of this Pet.
        :type size: float
        """

        self._size = size

    @property
    def description(self) -> str:
        """Gets the description of this Pet.


        :return: The description of this Pet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Pet.


        :param description: The description of this Pet.
        :type description: str
        """

        self._description = description

    @property
    def reimbursement(self) -> float:
        """Gets the reimbursement of this Pet.


        :return: The reimbursement of this Pet.
        :rtype: float
        """
        return self._reimbursement

    @reimbursement.setter
    def reimbursement(self, reimbursement: float):
        """Sets the reimbursement of this Pet.


        :param reimbursement: The reimbursement of this Pet.
        :type reimbursement: float
        """

        self._reimbursement = reimbursement
