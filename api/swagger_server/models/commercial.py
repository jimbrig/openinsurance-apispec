# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Commercial(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, registered_address: str=None, date_founded: date=None, email: str=None, phone: str=None, occupation: str=None, preferred_language: str=None, registration_number: str=None, vat: str=None):  # noqa: E501
        """Commercial - a model defined in Swagger

        :param name: The name of this Commercial.  # noqa: E501
        :type name: str
        :param registered_address: The registered_address of this Commercial.  # noqa: E501
        :type registered_address: str
        :param date_founded: The date_founded of this Commercial.  # noqa: E501
        :type date_founded: date
        :param email: The email of this Commercial.  # noqa: E501
        :type email: str
        :param phone: The phone of this Commercial.  # noqa: E501
        :type phone: str
        :param occupation: The occupation of this Commercial.  # noqa: E501
        :type occupation: str
        :param preferred_language: The preferred_language of this Commercial.  # noqa: E501
        :type preferred_language: str
        :param registration_number: The registration_number of this Commercial.  # noqa: E501
        :type registration_number: str
        :param vat: The vat of this Commercial.  # noqa: E501
        :type vat: str
        """
        self.swagger_types = {
            'name': str,
            'registered_address': str,
            'date_founded': date,
            'email': str,
            'phone': str,
            'occupation': str,
            'preferred_language': str,
            'registration_number': str,
            'vat': str
        }

        self.attribute_map = {
            'name': 'name',
            'registered_address': 'registeredAddress',
            'date_founded': 'dateFounded',
            'email': 'email',
            'phone': 'phone',
            'occupation': 'occupation',
            'preferred_language': 'preferredLanguage',
            'registration_number': 'registrationNumber',
            'vat': 'vat'
        }
        self._name = name
        self._registered_address = registered_address
        self._date_founded = date_founded
        self._email = email
        self._phone = phone
        self._occupation = occupation
        self._preferred_language = preferred_language
        self._registration_number = registration_number
        self._vat = vat

    @classmethod
    def from_dict(cls, dikt) -> 'Commercial':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Commercial of this Commercial.  # noqa: E501
        :rtype: Commercial
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Commercial.


        :return: The name of this Commercial.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Commercial.


        :param name: The name of this Commercial.
        :type name: str
        """

        self._name = name

    @property
    def registered_address(self) -> str:
        """Gets the registered_address of this Commercial.


        :return: The registered_address of this Commercial.
        :rtype: str
        """
        return self._registered_address

    @registered_address.setter
    def registered_address(self, registered_address: str):
        """Sets the registered_address of this Commercial.


        :param registered_address: The registered_address of this Commercial.
        :type registered_address: str
        """

        self._registered_address = registered_address

    @property
    def date_founded(self) -> date:
        """Gets the date_founded of this Commercial.


        :return: The date_founded of this Commercial.
        :rtype: date
        """
        return self._date_founded

    @date_founded.setter
    def date_founded(self, date_founded: date):
        """Sets the date_founded of this Commercial.


        :param date_founded: The date_founded of this Commercial.
        :type date_founded: date
        """

        self._date_founded = date_founded

    @property
    def email(self) -> str:
        """Gets the email of this Commercial.


        :return: The email of this Commercial.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Commercial.


        :param email: The email of this Commercial.
        :type email: str
        """

        self._email = email

    @property
    def phone(self) -> str:
        """Gets the phone of this Commercial.


        :return: The phone of this Commercial.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this Commercial.


        :param phone: The phone of this Commercial.
        :type phone: str
        """

        self._phone = phone

    @property
    def occupation(self) -> str:
        """Gets the occupation of this Commercial.


        :return: The occupation of this Commercial.
        :rtype: str
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation: str):
        """Sets the occupation of this Commercial.


        :param occupation: The occupation of this Commercial.
        :type occupation: str
        """

        self._occupation = occupation

    @property
    def preferred_language(self) -> str:
        """Gets the preferred_language of this Commercial.


        :return: The preferred_language of this Commercial.
        :rtype: str
        """
        return self._preferred_language

    @preferred_language.setter
    def preferred_language(self, preferred_language: str):
        """Sets the preferred_language of this Commercial.


        :param preferred_language: The preferred_language of this Commercial.
        :type preferred_language: str
        """

        self._preferred_language = preferred_language

    @property
    def registration_number(self) -> str:
        """Gets the registration_number of this Commercial.


        :return: The registration_number of this Commercial.
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number: str):
        """Sets the registration_number of this Commercial.


        :param registration_number: The registration_number of this Commercial.
        :type registration_number: str
        """

        self._registration_number = registration_number

    @property
    def vat(self) -> str:
        """Gets the vat of this Commercial.


        :return: The vat of this Commercial.
        :rtype: str
        """
        return self._vat

    @vat.setter
    def vat(self, vat: str):
        """Sets the vat of this Commercial.


        :param vat: The vat of this Commercial.
        :type vat: str
        """

        self._vat = vat
