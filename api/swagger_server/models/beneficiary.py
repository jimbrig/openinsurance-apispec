# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Beneficiary(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, address: str=None, share: float=None):  # noqa: E501
        """Beneficiary - a model defined in Swagger

        :param name: The name of this Beneficiary.  # noqa: E501
        :type name: str
        :param address: The address of this Beneficiary.  # noqa: E501
        :type address: str
        :param share: The share of this Beneficiary.  # noqa: E501
        :type share: float
        """
        self.swagger_types = {
            'name': str,
            'address': str,
            'share': float
        }

        self.attribute_map = {
            'name': 'name',
            'address': 'address',
            'share': 'share'
        }
        self._name = name
        self._address = address
        self._share = share

    @classmethod
    def from_dict(cls, dikt) -> 'Beneficiary':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Beneficiary of this Beneficiary.  # noqa: E501
        :rtype: Beneficiary
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Beneficiary.


        :return: The name of this Beneficiary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Beneficiary.


        :param name: The name of this Beneficiary.
        :type name: str
        """

        self._name = name

    @property
    def address(self) -> str:
        """Gets the address of this Beneficiary.


        :return: The address of this Beneficiary.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this Beneficiary.


        :param address: The address of this Beneficiary.
        :type address: str
        """

        self._address = address

    @property
    def share(self) -> float:
        """Gets the share of this Beneficiary.


        :return: The share of this Beneficiary.
        :rtype: float
        """
        return self._share

    @share.setter
    def share(self, share: float):
        """Sets the share of this Beneficiary.


        :param share: The share of this Beneficiary.
        :type share: float
        """

        self._share = share
