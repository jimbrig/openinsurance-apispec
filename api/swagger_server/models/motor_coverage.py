# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MotorCoverage(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, policy_number: str=None, inception_date: date=None, expiry_date: date=None, status: str=None, discount_amount: float=None, premium_rate: float=None, gross_written_premium: float=None, sales_tax: float=None, brokerage_percentage: float=None, brokerage_amount: float=None, premium_payment_frequency: float=None, indemnity_limit_policy: float=None, indemnity_limit_accident: float=None, is_agreed_value: bool=None, endorsement_id: str=None, endorsement_date: date=None, endorsement_type: str=None, peril: str=None, voluntary_deductible_percentage: float=None, voluntary_deductible_amount: float=None, compulsory_deductible_percentage: float=None, compulsory_deductible_amount: float=None, windscreen_deductible_percentage: float=None, windscreen_deductible_amount: float=None, distance_unit: float=None, pleasure_distance: float=None, business_distance: float=None, number_of_vehicles: float=None):  # noqa: E501
        """MotorCoverage - a model defined in Swagger

        :param policy_number: The policy_number of this MotorCoverage.  # noqa: E501
        :type policy_number: str
        :param inception_date: The inception_date of this MotorCoverage.  # noqa: E501
        :type inception_date: date
        :param expiry_date: The expiry_date of this MotorCoverage.  # noqa: E501
        :type expiry_date: date
        :param status: The status of this MotorCoverage.  # noqa: E501
        :type status: str
        :param discount_amount: The discount_amount of this MotorCoverage.  # noqa: E501
        :type discount_amount: float
        :param premium_rate: The premium_rate of this MotorCoverage.  # noqa: E501
        :type premium_rate: float
        :param gross_written_premium: The gross_written_premium of this MotorCoverage.  # noqa: E501
        :type gross_written_premium: float
        :param sales_tax: The sales_tax of this MotorCoverage.  # noqa: E501
        :type sales_tax: float
        :param brokerage_percentage: The brokerage_percentage of this MotorCoverage.  # noqa: E501
        :type brokerage_percentage: float
        :param brokerage_amount: The brokerage_amount of this MotorCoverage.  # noqa: E501
        :type brokerage_amount: float
        :param premium_payment_frequency: The premium_payment_frequency of this MotorCoverage.  # noqa: E501
        :type premium_payment_frequency: float
        :param indemnity_limit_policy: The indemnity_limit_policy of this MotorCoverage.  # noqa: E501
        :type indemnity_limit_policy: float
        :param indemnity_limit_accident: The indemnity_limit_accident of this MotorCoverage.  # noqa: E501
        :type indemnity_limit_accident: float
        :param is_agreed_value: The is_agreed_value of this MotorCoverage.  # noqa: E501
        :type is_agreed_value: bool
        :param endorsement_id: The endorsement_id of this MotorCoverage.  # noqa: E501
        :type endorsement_id: str
        :param endorsement_date: The endorsement_date of this MotorCoverage.  # noqa: E501
        :type endorsement_date: date
        :param endorsement_type: The endorsement_type of this MotorCoverage.  # noqa: E501
        :type endorsement_type: str
        :param peril: The peril of this MotorCoverage.  # noqa: E501
        :type peril: str
        :param voluntary_deductible_percentage: The voluntary_deductible_percentage of this MotorCoverage.  # noqa: E501
        :type voluntary_deductible_percentage: float
        :param voluntary_deductible_amount: The voluntary_deductible_amount of this MotorCoverage.  # noqa: E501
        :type voluntary_deductible_amount: float
        :param compulsory_deductible_percentage: The compulsory_deductible_percentage of this MotorCoverage.  # noqa: E501
        :type compulsory_deductible_percentage: float
        :param compulsory_deductible_amount: The compulsory_deductible_amount of this MotorCoverage.  # noqa: E501
        :type compulsory_deductible_amount: float
        :param windscreen_deductible_percentage: The windscreen_deductible_percentage of this MotorCoverage.  # noqa: E501
        :type windscreen_deductible_percentage: float
        :param windscreen_deductible_amount: The windscreen_deductible_amount of this MotorCoverage.  # noqa: E501
        :type windscreen_deductible_amount: float
        :param distance_unit: The distance_unit of this MotorCoverage.  # noqa: E501
        :type distance_unit: float
        :param pleasure_distance: The pleasure_distance of this MotorCoverage.  # noqa: E501
        :type pleasure_distance: float
        :param business_distance: The business_distance of this MotorCoverage.  # noqa: E501
        :type business_distance: float
        :param number_of_vehicles: The number_of_vehicles of this MotorCoverage.  # noqa: E501
        :type number_of_vehicles: float
        """
        self.swagger_types = {
            'policy_number': str,
            'inception_date': date,
            'expiry_date': date,
            'status': str,
            'discount_amount': float,
            'premium_rate': float,
            'gross_written_premium': float,
            'sales_tax': float,
            'brokerage_percentage': float,
            'brokerage_amount': float,
            'premium_payment_frequency': float,
            'indemnity_limit_policy': float,
            'indemnity_limit_accident': float,
            'is_agreed_value': bool,
            'endorsement_id': str,
            'endorsement_date': date,
            'endorsement_type': str,
            'peril': str,
            'voluntary_deductible_percentage': float,
            'voluntary_deductible_amount': float,
            'compulsory_deductible_percentage': float,
            'compulsory_deductible_amount': float,
            'windscreen_deductible_percentage': float,
            'windscreen_deductible_amount': float,
            'distance_unit': float,
            'pleasure_distance': float,
            'business_distance': float,
            'number_of_vehicles': float
        }

        self.attribute_map = {
            'policy_number': 'policyNumber',
            'inception_date': 'inceptionDate',
            'expiry_date': 'expiryDate',
            'status': 'status',
            'discount_amount': 'discountAmount',
            'premium_rate': 'premiumRate',
            'gross_written_premium': 'grossWrittenPremium',
            'sales_tax': 'salesTax',
            'brokerage_percentage': 'brokeragePercentage',
            'brokerage_amount': 'brokerageAmount',
            'premium_payment_frequency': 'premiumPaymentFrequency',
            'indemnity_limit_policy': 'indemnityLimitPolicy',
            'indemnity_limit_accident': 'indemnityLimitAccident',
            'is_agreed_value': 'isAgreedValue',
            'endorsement_id': 'endorsementID',
            'endorsement_date': 'endorsementDate',
            'endorsement_type': 'endorsementType',
            'peril': 'peril',
            'voluntary_deductible_percentage': 'voluntaryDeductiblePercentage',
            'voluntary_deductible_amount': 'voluntaryDeductibleAmount',
            'compulsory_deductible_percentage': 'compulsoryDeductiblePercentage',
            'compulsory_deductible_amount': 'compulsoryDeductibleAmount',
            'windscreen_deductible_percentage': 'windscreenDeductiblePercentage',
            'windscreen_deductible_amount': 'windscreenDeductibleAmount',
            'distance_unit': 'distanceUnit',
            'pleasure_distance': 'pleasureDistance',
            'business_distance': 'businessDistance',
            'number_of_vehicles': 'numberOfVehicles'
        }
        self._policy_number = policy_number
        self._inception_date = inception_date
        self._expiry_date = expiry_date
        self._status = status
        self._discount_amount = discount_amount
        self._premium_rate = premium_rate
        self._gross_written_premium = gross_written_premium
        self._sales_tax = sales_tax
        self._brokerage_percentage = brokerage_percentage
        self._brokerage_amount = brokerage_amount
        self._premium_payment_frequency = premium_payment_frequency
        self._indemnity_limit_policy = indemnity_limit_policy
        self._indemnity_limit_accident = indemnity_limit_accident
        self._is_agreed_value = is_agreed_value
        self._endorsement_id = endorsement_id
        self._endorsement_date = endorsement_date
        self._endorsement_type = endorsement_type
        self._peril = peril
        self._voluntary_deductible_percentage = voluntary_deductible_percentage
        self._voluntary_deductible_amount = voluntary_deductible_amount
        self._compulsory_deductible_percentage = compulsory_deductible_percentage
        self._compulsory_deductible_amount = compulsory_deductible_amount
        self._windscreen_deductible_percentage = windscreen_deductible_percentage
        self._windscreen_deductible_amount = windscreen_deductible_amount
        self._distance_unit = distance_unit
        self._pleasure_distance = pleasure_distance
        self._business_distance = business_distance
        self._number_of_vehicles = number_of_vehicles

    @classmethod
    def from_dict(cls, dikt) -> 'MotorCoverage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The motorCoverage of this MotorCoverage.  # noqa: E501
        :rtype: MotorCoverage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_number(self) -> str:
        """Gets the policy_number of this MotorCoverage.


        :return: The policy_number of this MotorCoverage.
        :rtype: str
        """
        return self._policy_number

    @policy_number.setter
    def policy_number(self, policy_number: str):
        """Sets the policy_number of this MotorCoverage.


        :param policy_number: The policy_number of this MotorCoverage.
        :type policy_number: str
        """

        self._policy_number = policy_number

    @property
    def inception_date(self) -> date:
        """Gets the inception_date of this MotorCoverage.


        :return: The inception_date of this MotorCoverage.
        :rtype: date
        """
        return self._inception_date

    @inception_date.setter
    def inception_date(self, inception_date: date):
        """Sets the inception_date of this MotorCoverage.


        :param inception_date: The inception_date of this MotorCoverage.
        :type inception_date: date
        """

        self._inception_date = inception_date

    @property
    def expiry_date(self) -> date:
        """Gets the expiry_date of this MotorCoverage.


        :return: The expiry_date of this MotorCoverage.
        :rtype: date
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date: date):
        """Sets the expiry_date of this MotorCoverage.


        :param expiry_date: The expiry_date of this MotorCoverage.
        :type expiry_date: date
        """

        self._expiry_date = expiry_date

    @property
    def status(self) -> str:
        """Gets the status of this MotorCoverage.


        :return: The status of this MotorCoverage.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this MotorCoverage.


        :param status: The status of this MotorCoverage.
        :type status: str
        """

        self._status = status

    @property
    def discount_amount(self) -> float:
        """Gets the discount_amount of this MotorCoverage.


        :return: The discount_amount of this MotorCoverage.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount: float):
        """Sets the discount_amount of this MotorCoverage.


        :param discount_amount: The discount_amount of this MotorCoverage.
        :type discount_amount: float
        """

        self._discount_amount = discount_amount

    @property
    def premium_rate(self) -> float:
        """Gets the premium_rate of this MotorCoverage.


        :return: The premium_rate of this MotorCoverage.
        :rtype: float
        """
        return self._premium_rate

    @premium_rate.setter
    def premium_rate(self, premium_rate: float):
        """Sets the premium_rate of this MotorCoverage.


        :param premium_rate: The premium_rate of this MotorCoverage.
        :type premium_rate: float
        """

        self._premium_rate = premium_rate

    @property
    def gross_written_premium(self) -> float:
        """Gets the gross_written_premium of this MotorCoverage.


        :return: The gross_written_premium of this MotorCoverage.
        :rtype: float
        """
        return self._gross_written_premium

    @gross_written_premium.setter
    def gross_written_premium(self, gross_written_premium: float):
        """Sets the gross_written_premium of this MotorCoverage.


        :param gross_written_premium: The gross_written_premium of this MotorCoverage.
        :type gross_written_premium: float
        """

        self._gross_written_premium = gross_written_premium

    @property
    def sales_tax(self) -> float:
        """Gets the sales_tax of this MotorCoverage.


        :return: The sales_tax of this MotorCoverage.
        :rtype: float
        """
        return self._sales_tax

    @sales_tax.setter
    def sales_tax(self, sales_tax: float):
        """Sets the sales_tax of this MotorCoverage.


        :param sales_tax: The sales_tax of this MotorCoverage.
        :type sales_tax: float
        """

        self._sales_tax = sales_tax

    @property
    def brokerage_percentage(self) -> float:
        """Gets the brokerage_percentage of this MotorCoverage.


        :return: The brokerage_percentage of this MotorCoverage.
        :rtype: float
        """
        return self._brokerage_percentage

    @brokerage_percentage.setter
    def brokerage_percentage(self, brokerage_percentage: float):
        """Sets the brokerage_percentage of this MotorCoverage.


        :param brokerage_percentage: The brokerage_percentage of this MotorCoverage.
        :type brokerage_percentage: float
        """

        self._brokerage_percentage = brokerage_percentage

    @property
    def brokerage_amount(self) -> float:
        """Gets the brokerage_amount of this MotorCoverage.


        :return: The brokerage_amount of this MotorCoverage.
        :rtype: float
        """
        return self._brokerage_amount

    @brokerage_amount.setter
    def brokerage_amount(self, brokerage_amount: float):
        """Sets the brokerage_amount of this MotorCoverage.


        :param brokerage_amount: The brokerage_amount of this MotorCoverage.
        :type brokerage_amount: float
        """

        self._brokerage_amount = brokerage_amount

    @property
    def premium_payment_frequency(self) -> float:
        """Gets the premium_payment_frequency of this MotorCoverage.


        :return: The premium_payment_frequency of this MotorCoverage.
        :rtype: float
        """
        return self._premium_payment_frequency

    @premium_payment_frequency.setter
    def premium_payment_frequency(self, premium_payment_frequency: float):
        """Sets the premium_payment_frequency of this MotorCoverage.


        :param premium_payment_frequency: The premium_payment_frequency of this MotorCoverage.
        :type premium_payment_frequency: float
        """

        self._premium_payment_frequency = premium_payment_frequency

    @property
    def indemnity_limit_policy(self) -> float:
        """Gets the indemnity_limit_policy of this MotorCoverage.


        :return: The indemnity_limit_policy of this MotorCoverage.
        :rtype: float
        """
        return self._indemnity_limit_policy

    @indemnity_limit_policy.setter
    def indemnity_limit_policy(self, indemnity_limit_policy: float):
        """Sets the indemnity_limit_policy of this MotorCoverage.


        :param indemnity_limit_policy: The indemnity_limit_policy of this MotorCoverage.
        :type indemnity_limit_policy: float
        """

        self._indemnity_limit_policy = indemnity_limit_policy

    @property
    def indemnity_limit_accident(self) -> float:
        """Gets the indemnity_limit_accident of this MotorCoverage.


        :return: The indemnity_limit_accident of this MotorCoverage.
        :rtype: float
        """
        return self._indemnity_limit_accident

    @indemnity_limit_accident.setter
    def indemnity_limit_accident(self, indemnity_limit_accident: float):
        """Sets the indemnity_limit_accident of this MotorCoverage.


        :param indemnity_limit_accident: The indemnity_limit_accident of this MotorCoverage.
        :type indemnity_limit_accident: float
        """

        self._indemnity_limit_accident = indemnity_limit_accident

    @property
    def is_agreed_value(self) -> bool:
        """Gets the is_agreed_value of this MotorCoverage.


        :return: The is_agreed_value of this MotorCoverage.
        :rtype: bool
        """
        return self._is_agreed_value

    @is_agreed_value.setter
    def is_agreed_value(self, is_agreed_value: bool):
        """Sets the is_agreed_value of this MotorCoverage.


        :param is_agreed_value: The is_agreed_value of this MotorCoverage.
        :type is_agreed_value: bool
        """

        self._is_agreed_value = is_agreed_value

    @property
    def endorsement_id(self) -> str:
        """Gets the endorsement_id of this MotorCoverage.


        :return: The endorsement_id of this MotorCoverage.
        :rtype: str
        """
        return self._endorsement_id

    @endorsement_id.setter
    def endorsement_id(self, endorsement_id: str):
        """Sets the endorsement_id of this MotorCoverage.


        :param endorsement_id: The endorsement_id of this MotorCoverage.
        :type endorsement_id: str
        """

        self._endorsement_id = endorsement_id

    @property
    def endorsement_date(self) -> date:
        """Gets the endorsement_date of this MotorCoverage.


        :return: The endorsement_date of this MotorCoverage.
        :rtype: date
        """
        return self._endorsement_date

    @endorsement_date.setter
    def endorsement_date(self, endorsement_date: date):
        """Sets the endorsement_date of this MotorCoverage.


        :param endorsement_date: The endorsement_date of this MotorCoverage.
        :type endorsement_date: date
        """

        self._endorsement_date = endorsement_date

    @property
    def endorsement_type(self) -> str:
        """Gets the endorsement_type of this MotorCoverage.


        :return: The endorsement_type of this MotorCoverage.
        :rtype: str
        """
        return self._endorsement_type

    @endorsement_type.setter
    def endorsement_type(self, endorsement_type: str):
        """Sets the endorsement_type of this MotorCoverage.


        :param endorsement_type: The endorsement_type of this MotorCoverage.
        :type endorsement_type: str
        """

        self._endorsement_type = endorsement_type

    @property
    def peril(self) -> str:
        """Gets the peril of this MotorCoverage.


        :return: The peril of this MotorCoverage.
        :rtype: str
        """
        return self._peril

    @peril.setter
    def peril(self, peril: str):
        """Sets the peril of this MotorCoverage.


        :param peril: The peril of this MotorCoverage.
        :type peril: str
        """

        self._peril = peril

    @property
    def voluntary_deductible_percentage(self) -> float:
        """Gets the voluntary_deductible_percentage of this MotorCoverage.


        :return: The voluntary_deductible_percentage of this MotorCoverage.
        :rtype: float
        """
        return self._voluntary_deductible_percentage

    @voluntary_deductible_percentage.setter
    def voluntary_deductible_percentage(self, voluntary_deductible_percentage: float):
        """Sets the voluntary_deductible_percentage of this MotorCoverage.


        :param voluntary_deductible_percentage: The voluntary_deductible_percentage of this MotorCoverage.
        :type voluntary_deductible_percentage: float
        """

        self._voluntary_deductible_percentage = voluntary_deductible_percentage

    @property
    def voluntary_deductible_amount(self) -> float:
        """Gets the voluntary_deductible_amount of this MotorCoverage.


        :return: The voluntary_deductible_amount of this MotorCoverage.
        :rtype: float
        """
        return self._voluntary_deductible_amount

    @voluntary_deductible_amount.setter
    def voluntary_deductible_amount(self, voluntary_deductible_amount: float):
        """Sets the voluntary_deductible_amount of this MotorCoverage.


        :param voluntary_deductible_amount: The voluntary_deductible_amount of this MotorCoverage.
        :type voluntary_deductible_amount: float
        """

        self._voluntary_deductible_amount = voluntary_deductible_amount

    @property
    def compulsory_deductible_percentage(self) -> float:
        """Gets the compulsory_deductible_percentage of this MotorCoverage.


        :return: The compulsory_deductible_percentage of this MotorCoverage.
        :rtype: float
        """
        return self._compulsory_deductible_percentage

    @compulsory_deductible_percentage.setter
    def compulsory_deductible_percentage(self, compulsory_deductible_percentage: float):
        """Sets the compulsory_deductible_percentage of this MotorCoverage.


        :param compulsory_deductible_percentage: The compulsory_deductible_percentage of this MotorCoverage.
        :type compulsory_deductible_percentage: float
        """

        self._compulsory_deductible_percentage = compulsory_deductible_percentage

    @property
    def compulsory_deductible_amount(self) -> float:
        """Gets the compulsory_deductible_amount of this MotorCoverage.


        :return: The compulsory_deductible_amount of this MotorCoverage.
        :rtype: float
        """
        return self._compulsory_deductible_amount

    @compulsory_deductible_amount.setter
    def compulsory_deductible_amount(self, compulsory_deductible_amount: float):
        """Sets the compulsory_deductible_amount of this MotorCoverage.


        :param compulsory_deductible_amount: The compulsory_deductible_amount of this MotorCoverage.
        :type compulsory_deductible_amount: float
        """

        self._compulsory_deductible_amount = compulsory_deductible_amount

    @property
    def windscreen_deductible_percentage(self) -> float:
        """Gets the windscreen_deductible_percentage of this MotorCoverage.


        :return: The windscreen_deductible_percentage of this MotorCoverage.
        :rtype: float
        """
        return self._windscreen_deductible_percentage

    @windscreen_deductible_percentage.setter
    def windscreen_deductible_percentage(self, windscreen_deductible_percentage: float):
        """Sets the windscreen_deductible_percentage of this MotorCoverage.


        :param windscreen_deductible_percentage: The windscreen_deductible_percentage of this MotorCoverage.
        :type windscreen_deductible_percentage: float
        """

        self._windscreen_deductible_percentage = windscreen_deductible_percentage

    @property
    def windscreen_deductible_amount(self) -> float:
        """Gets the windscreen_deductible_amount of this MotorCoverage.


        :return: The windscreen_deductible_amount of this MotorCoverage.
        :rtype: float
        """
        return self._windscreen_deductible_amount

    @windscreen_deductible_amount.setter
    def windscreen_deductible_amount(self, windscreen_deductible_amount: float):
        """Sets the windscreen_deductible_amount of this MotorCoverage.


        :param windscreen_deductible_amount: The windscreen_deductible_amount of this MotorCoverage.
        :type windscreen_deductible_amount: float
        """

        self._windscreen_deductible_amount = windscreen_deductible_amount

    @property
    def distance_unit(self) -> float:
        """Gets the distance_unit of this MotorCoverage.


        :return: The distance_unit of this MotorCoverage.
        :rtype: float
        """
        return self._distance_unit

    @distance_unit.setter
    def distance_unit(self, distance_unit: float):
        """Sets the distance_unit of this MotorCoverage.


        :param distance_unit: The distance_unit of this MotorCoverage.
        :type distance_unit: float
        """

        self._distance_unit = distance_unit

    @property
    def pleasure_distance(self) -> float:
        """Gets the pleasure_distance of this MotorCoverage.


        :return: The pleasure_distance of this MotorCoverage.
        :rtype: float
        """
        return self._pleasure_distance

    @pleasure_distance.setter
    def pleasure_distance(self, pleasure_distance: float):
        """Sets the pleasure_distance of this MotorCoverage.


        :param pleasure_distance: The pleasure_distance of this MotorCoverage.
        :type pleasure_distance: float
        """

        self._pleasure_distance = pleasure_distance

    @property
    def business_distance(self) -> float:
        """Gets the business_distance of this MotorCoverage.


        :return: The business_distance of this MotorCoverage.
        :rtype: float
        """
        return self._business_distance

    @business_distance.setter
    def business_distance(self, business_distance: float):
        """Sets the business_distance of this MotorCoverage.


        :param business_distance: The business_distance of this MotorCoverage.
        :type business_distance: float
        """

        self._business_distance = business_distance

    @property
    def number_of_vehicles(self) -> float:
        """Gets the number_of_vehicles of this MotorCoverage.


        :return: The number_of_vehicles of this MotorCoverage.
        :rtype: float
        """
        return self._number_of_vehicles

    @number_of_vehicles.setter
    def number_of_vehicles(self, number_of_vehicles: float):
        """Sets the number_of_vehicles of this MotorCoverage.


        :param number_of_vehicles: The number_of_vehicles of this MotorCoverage.
        :type number_of_vehicles: float
        """

        self._number_of_vehicles = number_of_vehicles
