# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Product(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, line_of_business: str=None, product_model: str=None, contract_type: str=None, grace_period: date=None, currency: str=None, policy_wording: str=None, policy_fee: float=None, premium_payment_frequency: float=None, profit_share: str=None, intermediary: str=None):  # noqa: E501
        """Product - a model defined in Swagger

        :param line_of_business: The line_of_business of this Product.  # noqa: E501
        :type line_of_business: str
        :param product_model: The product_model of this Product.  # noqa: E501
        :type product_model: str
        :param contract_type: The contract_type of this Product.  # noqa: E501
        :type contract_type: str
        :param grace_period: The grace_period of this Product.  # noqa: E501
        :type grace_period: date
        :param currency: The currency of this Product.  # noqa: E501
        :type currency: str
        :param policy_wording: The policy_wording of this Product.  # noqa: E501
        :type policy_wording: str
        :param policy_fee: The policy_fee of this Product.  # noqa: E501
        :type policy_fee: float
        :param premium_payment_frequency: The premium_payment_frequency of this Product.  # noqa: E501
        :type premium_payment_frequency: float
        :param profit_share: The profit_share of this Product.  # noqa: E501
        :type profit_share: str
        :param intermediary: The intermediary of this Product.  # noqa: E501
        :type intermediary: str
        """
        self.swagger_types = {
            'line_of_business': str,
            'product_model': str,
            'contract_type': str,
            'grace_period': date,
            'currency': str,
            'policy_wording': str,
            'policy_fee': float,
            'premium_payment_frequency': float,
            'profit_share': str,
            'intermediary': str
        }

        self.attribute_map = {
            'line_of_business': 'lineOfBusiness',
            'product_model': 'productModel',
            'contract_type': 'contractType',
            'grace_period': 'gracePeriod',
            'currency': 'currency',
            'policy_wording': 'policyWording',
            'policy_fee': 'policyFee',
            'premium_payment_frequency': 'premiumPaymentFrequency',
            'profit_share': 'profitShare',
            'intermediary': 'intermediary'
        }
        self._line_of_business = line_of_business
        self._product_model = product_model
        self._contract_type = contract_type
        self._grace_period = grace_period
        self._currency = currency
        self._policy_wording = policy_wording
        self._policy_fee = policy_fee
        self._premium_payment_frequency = premium_payment_frequency
        self._profit_share = profit_share
        self._intermediary = intermediary

    @classmethod
    def from_dict(cls, dikt) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Product of this Product.  # noqa: E501
        :rtype: Product
        """
        return util.deserialize_model(dikt, cls)

    @property
    def line_of_business(self) -> str:
        """Gets the line_of_business of this Product.


        :return: The line_of_business of this Product.
        :rtype: str
        """
        return self._line_of_business

    @line_of_business.setter
    def line_of_business(self, line_of_business: str):
        """Sets the line_of_business of this Product.


        :param line_of_business: The line_of_business of this Product.
        :type line_of_business: str
        """

        self._line_of_business = line_of_business

    @property
    def product_model(self) -> str:
        """Gets the product_model of this Product.


        :return: The product_model of this Product.
        :rtype: str
        """
        return self._product_model

    @product_model.setter
    def product_model(self, product_model: str):
        """Sets the product_model of this Product.


        :param product_model: The product_model of this Product.
        :type product_model: str
        """

        self._product_model = product_model

    @property
    def contract_type(self) -> str:
        """Gets the contract_type of this Product.


        :return: The contract_type of this Product.
        :rtype: str
        """
        return self._contract_type

    @contract_type.setter
    def contract_type(self, contract_type: str):
        """Sets the contract_type of this Product.


        :param contract_type: The contract_type of this Product.
        :type contract_type: str
        """

        self._contract_type = contract_type

    @property
    def grace_period(self) -> date:
        """Gets the grace_period of this Product.


        :return: The grace_period of this Product.
        :rtype: date
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period: date):
        """Sets the grace_period of this Product.


        :param grace_period: The grace_period of this Product.
        :type grace_period: date
        """

        self._grace_period = grace_period

    @property
    def currency(self) -> str:
        """Gets the currency of this Product.


        :return: The currency of this Product.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this Product.


        :param currency: The currency of this Product.
        :type currency: str
        """

        self._currency = currency

    @property
    def policy_wording(self) -> str:
        """Gets the policy_wording of this Product.


        :return: The policy_wording of this Product.
        :rtype: str
        """
        return self._policy_wording

    @policy_wording.setter
    def policy_wording(self, policy_wording: str):
        """Sets the policy_wording of this Product.


        :param policy_wording: The policy_wording of this Product.
        :type policy_wording: str
        """

        self._policy_wording = policy_wording

    @property
    def policy_fee(self) -> float:
        """Gets the policy_fee of this Product.


        :return: The policy_fee of this Product.
        :rtype: float
        """
        return self._policy_fee

    @policy_fee.setter
    def policy_fee(self, policy_fee: float):
        """Sets the policy_fee of this Product.


        :param policy_fee: The policy_fee of this Product.
        :type policy_fee: float
        """

        self._policy_fee = policy_fee

    @property
    def premium_payment_frequency(self) -> float:
        """Gets the premium_payment_frequency of this Product.


        :return: The premium_payment_frequency of this Product.
        :rtype: float
        """
        return self._premium_payment_frequency

    @premium_payment_frequency.setter
    def premium_payment_frequency(self, premium_payment_frequency: float):
        """Sets the premium_payment_frequency of this Product.


        :param premium_payment_frequency: The premium_payment_frequency of this Product.
        :type premium_payment_frequency: float
        """

        self._premium_payment_frequency = premium_payment_frequency

    @property
    def profit_share(self) -> str:
        """Gets the profit_share of this Product.


        :return: The profit_share of this Product.
        :rtype: str
        """
        return self._profit_share

    @profit_share.setter
    def profit_share(self, profit_share: str):
        """Sets the profit_share of this Product.


        :param profit_share: The profit_share of this Product.
        :type profit_share: str
        """

        self._profit_share = profit_share

    @property
    def intermediary(self) -> str:
        """Gets the intermediary of this Product.


        :return: The intermediary of this Product.
        :rtype: str
        """
        return self._intermediary

    @intermediary.setter
    def intermediary(self, intermediary: str):
        """Sets the intermediary of this Product.


        :param intermediary: The intermediary of this Product.
        :type intermediary: str
        """

        self._intermediary = intermediary
