# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Conviction(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, offence_date: date=None, offence_code: str=None, _date: date=None, points: float=None, fine: float=None, fine_currency: str=None, suspension: bool=None, suspension_length: float=None):  # noqa: E501
        """Conviction - a model defined in Swagger

        :param offence_date: The offence_date of this Conviction.  # noqa: E501
        :type offence_date: date
        :param offence_code: The offence_code of this Conviction.  # noqa: E501
        :type offence_code: str
        :param _date: The _date of this Conviction.  # noqa: E501
        :type _date: date
        :param points: The points of this Conviction.  # noqa: E501
        :type points: float
        :param fine: The fine of this Conviction.  # noqa: E501
        :type fine: float
        :param fine_currency: The fine_currency of this Conviction.  # noqa: E501
        :type fine_currency: str
        :param suspension: The suspension of this Conviction.  # noqa: E501
        :type suspension: bool
        :param suspension_length: The suspension_length of this Conviction.  # noqa: E501
        :type suspension_length: float
        """
        self.swagger_types = {
            'offence_date': date,
            'offence_code': str,
            '_date': date,
            'points': float,
            'fine': float,
            'fine_currency': str,
            'suspension': bool,
            'suspension_length': float
        }

        self.attribute_map = {
            'offence_date': 'offenceDate',
            'offence_code': 'offenceCode',
            '_date': 'date',
            'points': 'points',
            'fine': 'fine',
            'fine_currency': 'fineCurrency',
            'suspension': 'suspension',
            'suspension_length': 'suspensionLength'
        }
        self._offence_date = offence_date
        self._offence_code = offence_code
        self.__date = _date
        self._points = points
        self._fine = fine
        self._fine_currency = fine_currency
        self._suspension = suspension
        self._suspension_length = suspension_length

    @classmethod
    def from_dict(cls, dikt) -> 'Conviction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The conviction of this Conviction.  # noqa: E501
        :rtype: Conviction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offence_date(self) -> date:
        """Gets the offence_date of this Conviction.


        :return: The offence_date of this Conviction.
        :rtype: date
        """
        return self._offence_date

    @offence_date.setter
    def offence_date(self, offence_date: date):
        """Sets the offence_date of this Conviction.


        :param offence_date: The offence_date of this Conviction.
        :type offence_date: date
        """

        self._offence_date = offence_date

    @property
    def offence_code(self) -> str:
        """Gets the offence_code of this Conviction.


        :return: The offence_code of this Conviction.
        :rtype: str
        """
        return self._offence_code

    @offence_code.setter
    def offence_code(self, offence_code: str):
        """Sets the offence_code of this Conviction.


        :param offence_code: The offence_code of this Conviction.
        :type offence_code: str
        """

        self._offence_code = offence_code

    @property
    def _date(self) -> date:
        """Gets the _date of this Conviction.


        :return: The _date of this Conviction.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date: date):
        """Sets the _date of this Conviction.


        :param _date: The _date of this Conviction.
        :type _date: date
        """

        self.__date = _date

    @property
    def points(self) -> float:
        """Gets the points of this Conviction.


        :return: The points of this Conviction.
        :rtype: float
        """
        return self._points

    @points.setter
    def points(self, points: float):
        """Sets the points of this Conviction.


        :param points: The points of this Conviction.
        :type points: float
        """

        self._points = points

    @property
    def fine(self) -> float:
        """Gets the fine of this Conviction.


        :return: The fine of this Conviction.
        :rtype: float
        """
        return self._fine

    @fine.setter
    def fine(self, fine: float):
        """Sets the fine of this Conviction.


        :param fine: The fine of this Conviction.
        :type fine: float
        """

        self._fine = fine

    @property
    def fine_currency(self) -> str:
        """Gets the fine_currency of this Conviction.


        :return: The fine_currency of this Conviction.
        :rtype: str
        """
        return self._fine_currency

    @fine_currency.setter
    def fine_currency(self, fine_currency: str):
        """Sets the fine_currency of this Conviction.


        :param fine_currency: The fine_currency of this Conviction.
        :type fine_currency: str
        """

        self._fine_currency = fine_currency

    @property
    def suspension(self) -> bool:
        """Gets the suspension of this Conviction.


        :return: The suspension of this Conviction.
        :rtype: bool
        """
        return self._suspension

    @suspension.setter
    def suspension(self, suspension: bool):
        """Sets the suspension of this Conviction.


        :param suspension: The suspension of this Conviction.
        :type suspension: bool
        """

        self._suspension = suspension

    @property
    def suspension_length(self) -> float:
        """Gets the suspension_length of this Conviction.


        :return: The suspension_length of this Conviction.
        :rtype: float
        """
        return self._suspension_length

    @suspension_length.setter
    def suspension_length(self, suspension_length: float):
        """Sets the suspension_length of this Conviction.


        :param suspension_length: The suspension_length of this Conviction.
        :type suspension_length: float
        """

        self._suspension_length = suspension_length
