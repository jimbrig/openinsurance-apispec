# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DrivingLicence(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, licence_number: str=None, issue_date: date=None, expiry_date: date=None, country: str=None, licence_category: str=None, licence_codes: str=None):  # noqa: E501
        """DrivingLicence - a model defined in Swagger

        :param licence_number: The licence_number of this DrivingLicence.  # noqa: E501
        :type licence_number: str
        :param issue_date: The issue_date of this DrivingLicence.  # noqa: E501
        :type issue_date: date
        :param expiry_date: The expiry_date of this DrivingLicence.  # noqa: E501
        :type expiry_date: date
        :param country: The country of this DrivingLicence.  # noqa: E501
        :type country: str
        :param licence_category: The licence_category of this DrivingLicence.  # noqa: E501
        :type licence_category: str
        :param licence_codes: The licence_codes of this DrivingLicence.  # noqa: E501
        :type licence_codes: str
        """
        self.swagger_types = {
            'licence_number': str,
            'issue_date': date,
            'expiry_date': date,
            'country': str,
            'licence_category': str,
            'licence_codes': str
        }

        self.attribute_map = {
            'licence_number': 'licenceNumber',
            'issue_date': 'issueDate',
            'expiry_date': 'expiryDate',
            'country': 'country',
            'licence_category': 'licenceCategory',
            'licence_codes': 'licenceCodes'
        }
        self._licence_number = licence_number
        self._issue_date = issue_date
        self._expiry_date = expiry_date
        self._country = country
        self._licence_category = licence_category
        self._licence_codes = licence_codes

    @classmethod
    def from_dict(cls, dikt) -> 'DrivingLicence':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The drivingLicence of this DrivingLicence.  # noqa: E501
        :rtype: DrivingLicence
        """
        return util.deserialize_model(dikt, cls)

    @property
    def licence_number(self) -> str:
        """Gets the licence_number of this DrivingLicence.


        :return: The licence_number of this DrivingLicence.
        :rtype: str
        """
        return self._licence_number

    @licence_number.setter
    def licence_number(self, licence_number: str):
        """Sets the licence_number of this DrivingLicence.


        :param licence_number: The licence_number of this DrivingLicence.
        :type licence_number: str
        """

        self._licence_number = licence_number

    @property
    def issue_date(self) -> date:
        """Gets the issue_date of this DrivingLicence.


        :return: The issue_date of this DrivingLicence.
        :rtype: date
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date: date):
        """Sets the issue_date of this DrivingLicence.


        :param issue_date: The issue_date of this DrivingLicence.
        :type issue_date: date
        """

        self._issue_date = issue_date

    @property
    def expiry_date(self) -> date:
        """Gets the expiry_date of this DrivingLicence.


        :return: The expiry_date of this DrivingLicence.
        :rtype: date
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date: date):
        """Sets the expiry_date of this DrivingLicence.


        :param expiry_date: The expiry_date of this DrivingLicence.
        :type expiry_date: date
        """

        self._expiry_date = expiry_date

    @property
    def country(self) -> str:
        """Gets the country of this DrivingLicence.


        :return: The country of this DrivingLicence.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this DrivingLicence.


        :param country: The country of this DrivingLicence.
        :type country: str
        """

        self._country = country

    @property
    def licence_category(self) -> str:
        """Gets the licence_category of this DrivingLicence.


        :return: The licence_category of this DrivingLicence.
        :rtype: str
        """
        return self._licence_category

    @licence_category.setter
    def licence_category(self, licence_category: str):
        """Sets the licence_category of this DrivingLicence.


        :param licence_category: The licence_category of this DrivingLicence.
        :type licence_category: str
        """

        self._licence_category = licence_category

    @property
    def licence_codes(self) -> str:
        """Gets the licence_codes of this DrivingLicence.


        :return: The licence_codes of this DrivingLicence.
        :rtype: str
        """
        return self._licence_codes

    @licence_codes.setter
    def licence_codes(self, licence_codes: str):
        """Sets the licence_codes of this DrivingLicence.


        :param licence_codes: The licence_codes of this DrivingLicence.
        :type licence_codes: str
        """

        self._licence_codes = licence_codes
