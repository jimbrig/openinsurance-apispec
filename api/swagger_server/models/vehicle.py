# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Vehicle(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, hp: float=None, kw: float=None, torque: float=None, ev_hp: float=None, ev_kw: float=None, ev_torque: float=None, acceleration: float=None, vehicle_top_speed: float=None, engine_capacity: float=None, model_year: float=None, has_traction_enabled: bool=None, has_immobilizer: bool=None, has_theft_detection: bool=None, current_mileage_dynamic: float=None, yearly_milage_dynamic: float=None, highway_yearly_milage_dynamic: float=None, daily_milage_dynamic: float=None, service_history: float=None, service_due: float=None, time_to_service: float=None, recall_history: float=None, traction_control_engaged: bool=None, acceleration_longitudinal: float=None, acceleration_lateral: float=None, acceleration_vertical: float=None, braking_frequency: float=None, brake_pedal_force: float=None, brake_pedal_speed: float=None, performance_mode: float=None, emergency_braking: float=None, engnition_on: bool=None, engnition_off: bool=None, ignition_on_time: float=None, ignition_off_time: float=None, logitude: float=None, latitude: float=None, altitude: float=None, heading: float=None, is_moving: bool=None, horn_is_active: bool=None, driving_speed: float=None, wheel_spin: float=None, decelration_rate: float=None, steering_speed_turn: float=None, lane_departure_warnning: float=None, adas_abs_is_active: bool=None, obstacle_detection_is_active: bool=None, driver_intervention: bool=None, obstacle_detection_warning: str=None, speed_set: float=None, yaw: float=None, pitch: float=None, roll: float=None, g_force: float=None, trailer_included: bool=None, row1_pos1_isbelted: bool=None, row1_pos2_isbelted: bool=None, row2_pos1_isbelted: bool=None, row2_pos2_isbelted: bool=None, cabin_temp: float=None, cabin_humidity: float=None, tire_condition_row1_left: str=None, tire_condition_row1_right: str=None, tire_condition_row2_left: str=None, tire_condition_row2_right: str=None, tire_pressure_row1_left: str=None, tire_pressure_row1_right: str=None, tire_pressure_row2_left: str=None, tire_pressure_row2_right: str=None, brake_pad_wear_row1_left: str=None, brake_pad_wear_row1_right: str=None, brake_pad_wear_row2_left: str=None, brake_pad_wear_row2_right: str=None, brakes_wear_row1_right: str=None, brakes_wear_row1_left: str=None, brake_wear_row2_left: str=None, brake_wear_row2_right: str=None, clutch_wear: float=None, dashboard_warnning: str=None, has_airbag_deployed: bool=None, has_brakes_error: bool=None, engine_warning: str=None, known_vehicle_damage: str=None, damaged_parts: str=None, damaged_parts_cost: float=None, upcoming_service: date=None, occupied_seats: int=None, child_seat_occupies_seat: int=None, consent_granted: bool=None, plate_number: str=None, registration_date: date=None, country_of_registration: str=None, chassis_number: str=None, vin: str=None, engine_number: str=None, vehicle_weight: float=None, agency_repair: bool=None, body_type: str=None, fuel_type: str=None, ai_classification: str=None, vehicle_use: bool=None, vehicle_garage: bool=None, vehicle_brand: str=None, vehicle_model: str=None, seats: int=None, colour: str=None, sum_insured: float=None, accessories: str=None, accessory_value: str=None, co2_emissions: bool=None, automatic_transmission: bool=None, lefthand_drive: bool=None, doors: int=None, security_device: bool=None, modification: bool=None, digital_key_used: bool=None, blue_badge_adapted: bool=None, distance_unit: str=None, pleasure_distance: float=None, business_distance: float=None, current_mileage: int=None, yearly_milage: int=None):  # noqa: E501
        """Vehicle - a model defined in Swagger

        :param id: The id of this Vehicle.  # noqa: E501
        :type id: int
        :param hp: The hp of this Vehicle.  # noqa: E501
        :type hp: float
        :param kw: The kw of this Vehicle.  # noqa: E501
        :type kw: float
        :param torque: The torque of this Vehicle.  # noqa: E501
        :type torque: float
        :param ev_hp: The ev_hp of this Vehicle.  # noqa: E501
        :type ev_hp: float
        :param ev_kw: The ev_kw of this Vehicle.  # noqa: E501
        :type ev_kw: float
        :param ev_torque: The ev_torque of this Vehicle.  # noqa: E501
        :type ev_torque: float
        :param acceleration: The acceleration of this Vehicle.  # noqa: E501
        :type acceleration: float
        :param vehicle_top_speed: The vehicle_top_speed of this Vehicle.  # noqa: E501
        :type vehicle_top_speed: float
        :param engine_capacity: The engine_capacity of this Vehicle.  # noqa: E501
        :type engine_capacity: float
        :param model_year: The model_year of this Vehicle.  # noqa: E501
        :type model_year: float
        :param has_traction_enabled: The has_traction_enabled of this Vehicle.  # noqa: E501
        :type has_traction_enabled: bool
        :param has_immobilizer: The has_immobilizer of this Vehicle.  # noqa: E501
        :type has_immobilizer: bool
        :param has_theft_detection: The has_theft_detection of this Vehicle.  # noqa: E501
        :type has_theft_detection: bool
        :param current_mileage_dynamic: The current_mileage_dynamic of this Vehicle.  # noqa: E501
        :type current_mileage_dynamic: float
        :param yearly_milage_dynamic: The yearly_milage_dynamic of this Vehicle.  # noqa: E501
        :type yearly_milage_dynamic: float
        :param highway_yearly_milage_dynamic: The highway_yearly_milage_dynamic of this Vehicle.  # noqa: E501
        :type highway_yearly_milage_dynamic: float
        :param daily_milage_dynamic: The daily_milage_dynamic of this Vehicle.  # noqa: E501
        :type daily_milage_dynamic: float
        :param service_history: The service_history of this Vehicle.  # noqa: E501
        :type service_history: float
        :param service_due: The service_due of this Vehicle.  # noqa: E501
        :type service_due: float
        :param time_to_service: The time_to_service of this Vehicle.  # noqa: E501
        :type time_to_service: float
        :param recall_history: The recall_history of this Vehicle.  # noqa: E501
        :type recall_history: float
        :param traction_control_engaged: The traction_control_engaged of this Vehicle.  # noqa: E501
        :type traction_control_engaged: bool
        :param acceleration_longitudinal: The acceleration_longitudinal of this Vehicle.  # noqa: E501
        :type acceleration_longitudinal: float
        :param acceleration_lateral: The acceleration_lateral of this Vehicle.  # noqa: E501
        :type acceleration_lateral: float
        :param acceleration_vertical: The acceleration_vertical of this Vehicle.  # noqa: E501
        :type acceleration_vertical: float
        :param braking_frequency: The braking_frequency of this Vehicle.  # noqa: E501
        :type braking_frequency: float
        :param brake_pedal_force: The brake_pedal_force of this Vehicle.  # noqa: E501
        :type brake_pedal_force: float
        :param brake_pedal_speed: The brake_pedal_speed of this Vehicle.  # noqa: E501
        :type brake_pedal_speed: float
        :param performance_mode: The performance_mode of this Vehicle.  # noqa: E501
        :type performance_mode: float
        :param emergency_braking: The emergency_braking of this Vehicle.  # noqa: E501
        :type emergency_braking: float
        :param engnition_on: The engnition_on of this Vehicle.  # noqa: E501
        :type engnition_on: bool
        :param engnition_off: The engnition_off of this Vehicle.  # noqa: E501
        :type engnition_off: bool
        :param ignition_on_time: The ignition_on_time of this Vehicle.  # noqa: E501
        :type ignition_on_time: float
        :param ignition_off_time: The ignition_off_time of this Vehicle.  # noqa: E501
        :type ignition_off_time: float
        :param logitude: The logitude of this Vehicle.  # noqa: E501
        :type logitude: float
        :param latitude: The latitude of this Vehicle.  # noqa: E501
        :type latitude: float
        :param altitude: The altitude of this Vehicle.  # noqa: E501
        :type altitude: float
        :param heading: The heading of this Vehicle.  # noqa: E501
        :type heading: float
        :param is_moving: The is_moving of this Vehicle.  # noqa: E501
        :type is_moving: bool
        :param horn_is_active: The horn_is_active of this Vehicle.  # noqa: E501
        :type horn_is_active: bool
        :param driving_speed: The driving_speed of this Vehicle.  # noqa: E501
        :type driving_speed: float
        :param wheel_spin: The wheel_spin of this Vehicle.  # noqa: E501
        :type wheel_spin: float
        :param decelration_rate: The decelration_rate of this Vehicle.  # noqa: E501
        :type decelration_rate: float
        :param steering_speed_turn: The steering_speed_turn of this Vehicle.  # noqa: E501
        :type steering_speed_turn: float
        :param lane_departure_warnning: The lane_departure_warnning of this Vehicle.  # noqa: E501
        :type lane_departure_warnning: float
        :param adas_abs_is_active: The adas_abs_is_active of this Vehicle.  # noqa: E501
        :type adas_abs_is_active: bool
        :param obstacle_detection_is_active: The obstacle_detection_is_active of this Vehicle.  # noqa: E501
        :type obstacle_detection_is_active: bool
        :param driver_intervention: The driver_intervention of this Vehicle.  # noqa: E501
        :type driver_intervention: bool
        :param obstacle_detection_warning: The obstacle_detection_warning of this Vehicle.  # noqa: E501
        :type obstacle_detection_warning: str
        :param speed_set: The speed_set of this Vehicle.  # noqa: E501
        :type speed_set: float
        :param yaw: The yaw of this Vehicle.  # noqa: E501
        :type yaw: float
        :param pitch: The pitch of this Vehicle.  # noqa: E501
        :type pitch: float
        :param roll: The roll of this Vehicle.  # noqa: E501
        :type roll: float
        :param g_force: The g_force of this Vehicle.  # noqa: E501
        :type g_force: float
        :param trailer_included: The trailer_included of this Vehicle.  # noqa: E501
        :type trailer_included: bool
        :param row1_pos1_isbelted: The row1_pos1_isbelted of this Vehicle.  # noqa: E501
        :type row1_pos1_isbelted: bool
        :param row1_pos2_isbelted: The row1_pos2_isbelted of this Vehicle.  # noqa: E501
        :type row1_pos2_isbelted: bool
        :param row2_pos1_isbelted: The row2_pos1_isbelted of this Vehicle.  # noqa: E501
        :type row2_pos1_isbelted: bool
        :param row2_pos2_isbelted: The row2_pos2_isbelted of this Vehicle.  # noqa: E501
        :type row2_pos2_isbelted: bool
        :param cabin_temp: The cabin_temp of this Vehicle.  # noqa: E501
        :type cabin_temp: float
        :param cabin_humidity: The cabin_humidity of this Vehicle.  # noqa: E501
        :type cabin_humidity: float
        :param tire_condition_row1_left: The tire_condition_row1_left of this Vehicle.  # noqa: E501
        :type tire_condition_row1_left: str
        :param tire_condition_row1_right: The tire_condition_row1_right of this Vehicle.  # noqa: E501
        :type tire_condition_row1_right: str
        :param tire_condition_row2_left: The tire_condition_row2_left of this Vehicle.  # noqa: E501
        :type tire_condition_row2_left: str
        :param tire_condition_row2_right: The tire_condition_row2_right of this Vehicle.  # noqa: E501
        :type tire_condition_row2_right: str
        :param tire_pressure_row1_left: The tire_pressure_row1_left of this Vehicle.  # noqa: E501
        :type tire_pressure_row1_left: str
        :param tire_pressure_row1_right: The tire_pressure_row1_right of this Vehicle.  # noqa: E501
        :type tire_pressure_row1_right: str
        :param tire_pressure_row2_left: The tire_pressure_row2_left of this Vehicle.  # noqa: E501
        :type tire_pressure_row2_left: str
        :param tire_pressure_row2_right: The tire_pressure_row2_right of this Vehicle.  # noqa: E501
        :type tire_pressure_row2_right: str
        :param brake_pad_wear_row1_left: The brake_pad_wear_row1_left of this Vehicle.  # noqa: E501
        :type brake_pad_wear_row1_left: str
        :param brake_pad_wear_row1_right: The brake_pad_wear_row1_right of this Vehicle.  # noqa: E501
        :type brake_pad_wear_row1_right: str
        :param brake_pad_wear_row2_left: The brake_pad_wear_row2_left of this Vehicle.  # noqa: E501
        :type brake_pad_wear_row2_left: str
        :param brake_pad_wear_row2_right: The brake_pad_wear_row2_right of this Vehicle.  # noqa: E501
        :type brake_pad_wear_row2_right: str
        :param brakes_wear_row1_right: The brakes_wear_row1_right of this Vehicle.  # noqa: E501
        :type brakes_wear_row1_right: str
        :param brakes_wear_row1_left: The brakes_wear_row1_left of this Vehicle.  # noqa: E501
        :type brakes_wear_row1_left: str
        :param brake_wear_row2_left: The brake_wear_row2_left of this Vehicle.  # noqa: E501
        :type brake_wear_row2_left: str
        :param brake_wear_row2_right: The brake_wear_row2_right of this Vehicle.  # noqa: E501
        :type brake_wear_row2_right: str
        :param clutch_wear: The clutch_wear of this Vehicle.  # noqa: E501
        :type clutch_wear: float
        :param dashboard_warnning: The dashboard_warnning of this Vehicle.  # noqa: E501
        :type dashboard_warnning: str
        :param has_airbag_deployed: The has_airbag_deployed of this Vehicle.  # noqa: E501
        :type has_airbag_deployed: bool
        :param has_brakes_error: The has_brakes_error of this Vehicle.  # noqa: E501
        :type has_brakes_error: bool
        :param engine_warning: The engine_warning of this Vehicle.  # noqa: E501
        :type engine_warning: str
        :param known_vehicle_damage: The known_vehicle_damage of this Vehicle.  # noqa: E501
        :type known_vehicle_damage: str
        :param damaged_parts: The damaged_parts of this Vehicle.  # noqa: E501
        :type damaged_parts: str
        :param damaged_parts_cost: The damaged_parts_cost of this Vehicle.  # noqa: E501
        :type damaged_parts_cost: float
        :param upcoming_service: The upcoming_service of this Vehicle.  # noqa: E501
        :type upcoming_service: date
        :param occupied_seats: The occupied_seats of this Vehicle.  # noqa: E501
        :type occupied_seats: int
        :param child_seat_occupies_seat: The child_seat_occupies_seat of this Vehicle.  # noqa: E501
        :type child_seat_occupies_seat: int
        :param consent_granted: The consent_granted of this Vehicle.  # noqa: E501
        :type consent_granted: bool
        :param plate_number: The plate_number of this Vehicle.  # noqa: E501
        :type plate_number: str
        :param registration_date: The registration_date of this Vehicle.  # noqa: E501
        :type registration_date: date
        :param country_of_registration: The country_of_registration of this Vehicle.  # noqa: E501
        :type country_of_registration: str
        :param chassis_number: The chassis_number of this Vehicle.  # noqa: E501
        :type chassis_number: str
        :param vin: The vin of this Vehicle.  # noqa: E501
        :type vin: str
        :param engine_number: The engine_number of this Vehicle.  # noqa: E501
        :type engine_number: str
        :param vehicle_weight: The vehicle_weight of this Vehicle.  # noqa: E501
        :type vehicle_weight: float
        :param agency_repair: The agency_repair of this Vehicle.  # noqa: E501
        :type agency_repair: bool
        :param body_type: The body_type of this Vehicle.  # noqa: E501
        :type body_type: str
        :param fuel_type: The fuel_type of this Vehicle.  # noqa: E501
        :type fuel_type: str
        :param ai_classification: The ai_classification of this Vehicle.  # noqa: E501
        :type ai_classification: str
        :param vehicle_use: The vehicle_use of this Vehicle.  # noqa: E501
        :type vehicle_use: bool
        :param vehicle_garage: The vehicle_garage of this Vehicle.  # noqa: E501
        :type vehicle_garage: bool
        :param vehicle_brand: The vehicle_brand of this Vehicle.  # noqa: E501
        :type vehicle_brand: str
        :param vehicle_model: The vehicle_model of this Vehicle.  # noqa: E501
        :type vehicle_model: str
        :param seats: The seats of this Vehicle.  # noqa: E501
        :type seats: int
        :param colour: The colour of this Vehicle.  # noqa: E501
        :type colour: str
        :param sum_insured: The sum_insured of this Vehicle.  # noqa: E501
        :type sum_insured: float
        :param accessories: The accessories of this Vehicle.  # noqa: E501
        :type accessories: str
        :param accessory_value: The accessory_value of this Vehicle.  # noqa: E501
        :type accessory_value: str
        :param co2_emissions: The co2_emissions of this Vehicle.  # noqa: E501
        :type co2_emissions: bool
        :param automatic_transmission: The automatic_transmission of this Vehicle.  # noqa: E501
        :type automatic_transmission: bool
        :param lefthand_drive: The lefthand_drive of this Vehicle.  # noqa: E501
        :type lefthand_drive: bool
        :param doors: The doors of this Vehicle.  # noqa: E501
        :type doors: int
        :param security_device: The security_device of this Vehicle.  # noqa: E501
        :type security_device: bool
        :param modification: The modification of this Vehicle.  # noqa: E501
        :type modification: bool
        :param digital_key_used: The digital_key_used of this Vehicle.  # noqa: E501
        :type digital_key_used: bool
        :param blue_badge_adapted: The blue_badge_adapted of this Vehicle.  # noqa: E501
        :type blue_badge_adapted: bool
        :param distance_unit: The distance_unit of this Vehicle.  # noqa: E501
        :type distance_unit: str
        :param pleasure_distance: The pleasure_distance of this Vehicle.  # noqa: E501
        :type pleasure_distance: float
        :param business_distance: The business_distance of this Vehicle.  # noqa: E501
        :type business_distance: float
        :param current_mileage: The current_mileage of this Vehicle.  # noqa: E501
        :type current_mileage: int
        :param yearly_milage: The yearly_milage of this Vehicle.  # noqa: E501
        :type yearly_milage: int
        """
        self.swagger_types = {
            'id': int,
            'hp': float,
            'kw': float,
            'torque': float,
            'ev_hp': float,
            'ev_kw': float,
            'ev_torque': float,
            'acceleration': float,
            'vehicle_top_speed': float,
            'engine_capacity': float,
            'model_year': float,
            'has_traction_enabled': bool,
            'has_immobilizer': bool,
            'has_theft_detection': bool,
            'current_mileage_dynamic': float,
            'yearly_milage_dynamic': float,
            'highway_yearly_milage_dynamic': float,
            'daily_milage_dynamic': float,
            'service_history': float,
            'service_due': float,
            'time_to_service': float,
            'recall_history': float,
            'traction_control_engaged': bool,
            'acceleration_longitudinal': float,
            'acceleration_lateral': float,
            'acceleration_vertical': float,
            'braking_frequency': float,
            'brake_pedal_force': float,
            'brake_pedal_speed': float,
            'performance_mode': float,
            'emergency_braking': float,
            'engnition_on': bool,
            'engnition_off': bool,
            'ignition_on_time': float,
            'ignition_off_time': float,
            'logitude': float,
            'latitude': float,
            'altitude': float,
            'heading': float,
            'is_moving': bool,
            'horn_is_active': bool,
            'driving_speed': float,
            'wheel_spin': float,
            'decelration_rate': float,
            'steering_speed_turn': float,
            'lane_departure_warnning': float,
            'adas_abs_is_active': bool,
            'obstacle_detection_is_active': bool,
            'driver_intervention': bool,
            'obstacle_detection_warning': str,
            'speed_set': float,
            'yaw': float,
            'pitch': float,
            'roll': float,
            'g_force': float,
            'trailer_included': bool,
            'row1_pos1_isbelted': bool,
            'row1_pos2_isbelted': bool,
            'row2_pos1_isbelted': bool,
            'row2_pos2_isbelted': bool,
            'cabin_temp': float,
            'cabin_humidity': float,
            'tire_condition_row1_left': str,
            'tire_condition_row1_right': str,
            'tire_condition_row2_left': str,
            'tire_condition_row2_right': str,
            'tire_pressure_row1_left': str,
            'tire_pressure_row1_right': str,
            'tire_pressure_row2_left': str,
            'tire_pressure_row2_right': str,
            'brake_pad_wear_row1_left': str,
            'brake_pad_wear_row1_right': str,
            'brake_pad_wear_row2_left': str,
            'brake_pad_wear_row2_right': str,
            'brakes_wear_row1_right': str,
            'brakes_wear_row1_left': str,
            'brake_wear_row2_left': str,
            'brake_wear_row2_right': str,
            'clutch_wear': float,
            'dashboard_warnning': str,
            'has_airbag_deployed': bool,
            'has_brakes_error': bool,
            'engine_warning': str,
            'known_vehicle_damage': str,
            'damaged_parts': str,
            'damaged_parts_cost': float,
            'upcoming_service': date,
            'occupied_seats': int,
            'child_seat_occupies_seat': int,
            'consent_granted': bool,
            'plate_number': str,
            'registration_date': date,
            'country_of_registration': str,
            'chassis_number': str,
            'vin': str,
            'engine_number': str,
            'vehicle_weight': float,
            'agency_repair': bool,
            'body_type': str,
            'fuel_type': str,
            'ai_classification': str,
            'vehicle_use': bool,
            'vehicle_garage': bool,
            'vehicle_brand': str,
            'vehicle_model': str,
            'seats': int,
            'colour': str,
            'sum_insured': float,
            'accessories': str,
            'accessory_value': str,
            'co2_emissions': bool,
            'automatic_transmission': bool,
            'lefthand_drive': bool,
            'doors': int,
            'security_device': bool,
            'modification': bool,
            'digital_key_used': bool,
            'blue_badge_adapted': bool,
            'distance_unit': str,
            'pleasure_distance': float,
            'business_distance': float,
            'current_mileage': int,
            'yearly_milage': int
        }

        self.attribute_map = {
            'id': 'id',
            'hp': 'HP',
            'kw': 'KW',
            'torque': 'torque',
            'ev_hp': 'evHP',
            'ev_kw': 'evKW',
            'ev_torque': 'evTorque',
            'acceleration': 'acceleration',
            'vehicle_top_speed': 'vehicleTopSpeed',
            'engine_capacity': 'engineCapacity',
            'model_year': 'modelYear',
            'has_traction_enabled': 'hasTractionEnabled',
            'has_immobilizer': 'hasImmobilizer',
            'has_theft_detection': 'hasTheftDetection',
            'current_mileage_dynamic': 'currentMileageDynamic',
            'yearly_milage_dynamic': 'yearlyMilageDynamic',
            'highway_yearly_milage_dynamic': 'highwayYearlyMilageDynamic',
            'daily_milage_dynamic': 'dailyMilageDynamic',
            'service_history': 'serviceHistory',
            'service_due': 'serviceDue',
            'time_to_service': 'timeToService',
            'recall_history': 'recallHistory',
            'traction_control_engaged': 'tractionControlEngaged',
            'acceleration_longitudinal': 'accelerationLongitudinal',
            'acceleration_lateral': 'accelerationLateral',
            'acceleration_vertical': 'accelerationVertical',
            'braking_frequency': 'brakingFrequency',
            'brake_pedal_force': 'brakePedalForce',
            'brake_pedal_speed': 'brakePedalSpeed',
            'performance_mode': 'performanceMode',
            'emergency_braking': 'emergencyBraking',
            'engnition_on': 'engnitionOn',
            'engnition_off': 'engnitionOff',
            'ignition_on_time': 'ignitionOnTime',
            'ignition_off_time': 'ignitionOffTime',
            'logitude': 'logitude',
            'latitude': 'latitude',
            'altitude': 'altitude',
            'heading': 'heading',
            'is_moving': 'isMoving',
            'horn_is_active': 'hornIsActive',
            'driving_speed': 'drivingSpeed',
            'wheel_spin': 'wheelSpin',
            'decelration_rate': 'decelrationRate',
            'steering_speed_turn': 'steeringSpeedTurn',
            'lane_departure_warnning': 'laneDepartureWarnning',
            'adas_abs_is_active': 'adasAbsIsActive',
            'obstacle_detection_is_active': 'obstacleDetectionIsActive',
            'driver_intervention': 'driverIntervention',
            'obstacle_detection_warning': 'obstacleDetectionWarning',
            'speed_set': 'speedSet',
            'yaw': 'yaw',
            'pitch': 'pitch',
            'roll': 'roll',
            'g_force': 'gForce',
            'trailer_included': 'trailerIncluded',
            'row1_pos1_isbelted': 'row1Pos1Isbelted',
            'row1_pos2_isbelted': 'row1Pos2Isbelted',
            'row2_pos1_isbelted': 'row2Pos1Isbelted',
            'row2_pos2_isbelted': 'row2Pos2Isbelted',
            'cabin_temp': 'cabinTemp',
            'cabin_humidity': 'cabinHumidity',
            'tire_condition_row1_left': 'tireConditionRow1Left',
            'tire_condition_row1_right': 'tireConditionRow1Right',
            'tire_condition_row2_left': 'tireConditionRow2Left',
            'tire_condition_row2_right': 'tireConditionRow2Right',
            'tire_pressure_row1_left': 'tirePressureRow1Left',
            'tire_pressure_row1_right': 'tirePressureRow1Right',
            'tire_pressure_row2_left': 'tirePressureRow2Left',
            'tire_pressure_row2_right': 'tirePressureRow2Right',
            'brake_pad_wear_row1_left': 'brakePadWearRow1Left',
            'brake_pad_wear_row1_right': 'brakePadWearRow1Right',
            'brake_pad_wear_row2_left': 'brakePadWearRow2Left',
            'brake_pad_wear_row2_right': 'brakePadWearRow2Right',
            'brakes_wear_row1_right': 'brakesWearRow1Right',
            'brakes_wear_row1_left': 'brakesWearRow1Left',
            'brake_wear_row2_left': 'brakeWearRow2Left',
            'brake_wear_row2_right': 'brakeWearRow2Right',
            'clutch_wear': 'clutchWear',
            'dashboard_warnning': 'dashboardWarnning',
            'has_airbag_deployed': 'hasAirbagDeployed',
            'has_brakes_error': 'hasBrakesError',
            'engine_warning': 'engineWarning',
            'known_vehicle_damage': 'KnownVehicleDamage',
            'damaged_parts': 'damagedParts',
            'damaged_parts_cost': 'damagedPartsCost',
            'upcoming_service': 'upcomingService',
            'occupied_seats': 'occupiedSeats',
            'child_seat_occupies_seat': 'childSeatOccupiesSeat',
            'consent_granted': 'consentGranted',
            'plate_number': 'plateNumber',
            'registration_date': 'registrationDate',
            'country_of_registration': 'countryOfRegistration',
            'chassis_number': 'chassisNumber',
            'vin': 'vin',
            'engine_number': 'engineNumber',
            'vehicle_weight': 'vehicleWeight',
            'agency_repair': 'agencyRepair',
            'body_type': 'bodyType',
            'fuel_type': 'fuelType',
            'ai_classification': 'aiClassification',
            'vehicle_use': 'vehicleUse',
            'vehicle_garage': 'vehicleGarage',
            'vehicle_brand': 'vehicleBrand',
            'vehicle_model': 'vehicleModel',
            'seats': 'seats',
            'colour': 'colour',
            'sum_insured': 'sumInsured',
            'accessories': 'accessories',
            'accessory_value': 'accessoryValue',
            'co2_emissions': 'co2Emissions',
            'automatic_transmission': 'automaticTransmission',
            'lefthand_drive': 'lefthandDrive',
            'doors': 'doors',
            'security_device': 'securityDevice',
            'modification': 'modification',
            'digital_key_used': 'digitalKeyUsed',
            'blue_badge_adapted': 'blueBadgeAdapted',
            'distance_unit': 'distanceUnit',
            'pleasure_distance': 'pleasureDistance',
            'business_distance': 'businessDistance',
            'current_mileage': 'currentMileage',
            'yearly_milage': 'yearlyMilage'
        }
        self._id = id
        self._hp = hp
        self._kw = kw
        self._torque = torque
        self._ev_hp = ev_hp
        self._ev_kw = ev_kw
        self._ev_torque = ev_torque
        self._acceleration = acceleration
        self._vehicle_top_speed = vehicle_top_speed
        self._engine_capacity = engine_capacity
        self._model_year = model_year
        self._has_traction_enabled = has_traction_enabled
        self._has_immobilizer = has_immobilizer
        self._has_theft_detection = has_theft_detection
        self._current_mileage_dynamic = current_mileage_dynamic
        self._yearly_milage_dynamic = yearly_milage_dynamic
        self._highway_yearly_milage_dynamic = highway_yearly_milage_dynamic
        self._daily_milage_dynamic = daily_milage_dynamic
        self._service_history = service_history
        self._service_due = service_due
        self._time_to_service = time_to_service
        self._recall_history = recall_history
        self._traction_control_engaged = traction_control_engaged
        self._acceleration_longitudinal = acceleration_longitudinal
        self._acceleration_lateral = acceleration_lateral
        self._acceleration_vertical = acceleration_vertical
        self._braking_frequency = braking_frequency
        self._brake_pedal_force = brake_pedal_force
        self._brake_pedal_speed = brake_pedal_speed
        self._performance_mode = performance_mode
        self._emergency_braking = emergency_braking
        self._engnition_on = engnition_on
        self._engnition_off = engnition_off
        self._ignition_on_time = ignition_on_time
        self._ignition_off_time = ignition_off_time
        self._logitude = logitude
        self._latitude = latitude
        self._altitude = altitude
        self._heading = heading
        self._is_moving = is_moving
        self._horn_is_active = horn_is_active
        self._driving_speed = driving_speed
        self._wheel_spin = wheel_spin
        self._decelration_rate = decelration_rate
        self._steering_speed_turn = steering_speed_turn
        self._lane_departure_warnning = lane_departure_warnning
        self._adas_abs_is_active = adas_abs_is_active
        self._obstacle_detection_is_active = obstacle_detection_is_active
        self._driver_intervention = driver_intervention
        self._obstacle_detection_warning = obstacle_detection_warning
        self._speed_set = speed_set
        self._yaw = yaw
        self._pitch = pitch
        self._roll = roll
        self._g_force = g_force
        self._trailer_included = trailer_included
        self._row1_pos1_isbelted = row1_pos1_isbelted
        self._row1_pos2_isbelted = row1_pos2_isbelted
        self._row2_pos1_isbelted = row2_pos1_isbelted
        self._row2_pos2_isbelted = row2_pos2_isbelted
        self._cabin_temp = cabin_temp
        self._cabin_humidity = cabin_humidity
        self._tire_condition_row1_left = tire_condition_row1_left
        self._tire_condition_row1_right = tire_condition_row1_right
        self._tire_condition_row2_left = tire_condition_row2_left
        self._tire_condition_row2_right = tire_condition_row2_right
        self._tire_pressure_row1_left = tire_pressure_row1_left
        self._tire_pressure_row1_right = tire_pressure_row1_right
        self._tire_pressure_row2_left = tire_pressure_row2_left
        self._tire_pressure_row2_right = tire_pressure_row2_right
        self._brake_pad_wear_row1_left = brake_pad_wear_row1_left
        self._brake_pad_wear_row1_right = brake_pad_wear_row1_right
        self._brake_pad_wear_row2_left = brake_pad_wear_row2_left
        self._brake_pad_wear_row2_right = brake_pad_wear_row2_right
        self._brakes_wear_row1_right = brakes_wear_row1_right
        self._brakes_wear_row1_left = brakes_wear_row1_left
        self._brake_wear_row2_left = brake_wear_row2_left
        self._brake_wear_row2_right = brake_wear_row2_right
        self._clutch_wear = clutch_wear
        self._dashboard_warnning = dashboard_warnning
        self._has_airbag_deployed = has_airbag_deployed
        self._has_brakes_error = has_brakes_error
        self._engine_warning = engine_warning
        self._known_vehicle_damage = known_vehicle_damage
        self._damaged_parts = damaged_parts
        self._damaged_parts_cost = damaged_parts_cost
        self._upcoming_service = upcoming_service
        self._occupied_seats = occupied_seats
        self._child_seat_occupies_seat = child_seat_occupies_seat
        self._consent_granted = consent_granted
        self._plate_number = plate_number
        self._registration_date = registration_date
        self._country_of_registration = country_of_registration
        self._chassis_number = chassis_number
        self._vin = vin
        self._engine_number = engine_number
        self._vehicle_weight = vehicle_weight
        self._agency_repair = agency_repair
        self._body_type = body_type
        self._fuel_type = fuel_type
        self._ai_classification = ai_classification
        self._vehicle_use = vehicle_use
        self._vehicle_garage = vehicle_garage
        self._vehicle_brand = vehicle_brand
        self._vehicle_model = vehicle_model
        self._seats = seats
        self._colour = colour
        self._sum_insured = sum_insured
        self._accessories = accessories
        self._accessory_value = accessory_value
        self._co2_emissions = co2_emissions
        self._automatic_transmission = automatic_transmission
        self._lefthand_drive = lefthand_drive
        self._doors = doors
        self._security_device = security_device
        self._modification = modification
        self._digital_key_used = digital_key_used
        self._blue_badge_adapted = blue_badge_adapted
        self._distance_unit = distance_unit
        self._pleasure_distance = pleasure_distance
        self._business_distance = business_distance
        self._current_mileage = current_mileage
        self._yearly_milage = yearly_milage

    @classmethod
    def from_dict(cls, dikt) -> 'Vehicle':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Vehicle of this Vehicle.  # noqa: E501
        :rtype: Vehicle
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Vehicle.


        :return: The id of this Vehicle.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Vehicle.


        :param id: The id of this Vehicle.
        :type id: int
        """

        self._id = id

    @property
    def hp(self) -> float:
        """Gets the hp of this Vehicle.


        :return: The hp of this Vehicle.
        :rtype: float
        """
        return self._hp

    @hp.setter
    def hp(self, hp: float):
        """Sets the hp of this Vehicle.


        :param hp: The hp of this Vehicle.
        :type hp: float
        """

        self._hp = hp

    @property
    def kw(self) -> float:
        """Gets the kw of this Vehicle.


        :return: The kw of this Vehicle.
        :rtype: float
        """
        return self._kw

    @kw.setter
    def kw(self, kw: float):
        """Sets the kw of this Vehicle.


        :param kw: The kw of this Vehicle.
        :type kw: float
        """

        self._kw = kw

    @property
    def torque(self) -> float:
        """Gets the torque of this Vehicle.


        :return: The torque of this Vehicle.
        :rtype: float
        """
        return self._torque

    @torque.setter
    def torque(self, torque: float):
        """Sets the torque of this Vehicle.


        :param torque: The torque of this Vehicle.
        :type torque: float
        """

        self._torque = torque

    @property
    def ev_hp(self) -> float:
        """Gets the ev_hp of this Vehicle.


        :return: The ev_hp of this Vehicle.
        :rtype: float
        """
        return self._ev_hp

    @ev_hp.setter
    def ev_hp(self, ev_hp: float):
        """Sets the ev_hp of this Vehicle.


        :param ev_hp: The ev_hp of this Vehicle.
        :type ev_hp: float
        """

        self._ev_hp = ev_hp

    @property
    def ev_kw(self) -> float:
        """Gets the ev_kw of this Vehicle.


        :return: The ev_kw of this Vehicle.
        :rtype: float
        """
        return self._ev_kw

    @ev_kw.setter
    def ev_kw(self, ev_kw: float):
        """Sets the ev_kw of this Vehicle.


        :param ev_kw: The ev_kw of this Vehicle.
        :type ev_kw: float
        """

        self._ev_kw = ev_kw

    @property
    def ev_torque(self) -> float:
        """Gets the ev_torque of this Vehicle.


        :return: The ev_torque of this Vehicle.
        :rtype: float
        """
        return self._ev_torque

    @ev_torque.setter
    def ev_torque(self, ev_torque: float):
        """Sets the ev_torque of this Vehicle.


        :param ev_torque: The ev_torque of this Vehicle.
        :type ev_torque: float
        """

        self._ev_torque = ev_torque

    @property
    def acceleration(self) -> float:
        """Gets the acceleration of this Vehicle.


        :return: The acceleration of this Vehicle.
        :rtype: float
        """
        return self._acceleration

    @acceleration.setter
    def acceleration(self, acceleration: float):
        """Sets the acceleration of this Vehicle.


        :param acceleration: The acceleration of this Vehicle.
        :type acceleration: float
        """

        self._acceleration = acceleration

    @property
    def vehicle_top_speed(self) -> float:
        """Gets the vehicle_top_speed of this Vehicle.


        :return: The vehicle_top_speed of this Vehicle.
        :rtype: float
        """
        return self._vehicle_top_speed

    @vehicle_top_speed.setter
    def vehicle_top_speed(self, vehicle_top_speed: float):
        """Sets the vehicle_top_speed of this Vehicle.


        :param vehicle_top_speed: The vehicle_top_speed of this Vehicle.
        :type vehicle_top_speed: float
        """

        self._vehicle_top_speed = vehicle_top_speed

    @property
    def engine_capacity(self) -> float:
        """Gets the engine_capacity of this Vehicle.


        :return: The engine_capacity of this Vehicle.
        :rtype: float
        """
        return self._engine_capacity

    @engine_capacity.setter
    def engine_capacity(self, engine_capacity: float):
        """Sets the engine_capacity of this Vehicle.


        :param engine_capacity: The engine_capacity of this Vehicle.
        :type engine_capacity: float
        """

        self._engine_capacity = engine_capacity

    @property
    def model_year(self) -> float:
        """Gets the model_year of this Vehicle.


        :return: The model_year of this Vehicle.
        :rtype: float
        """
        return self._model_year

    @model_year.setter
    def model_year(self, model_year: float):
        """Sets the model_year of this Vehicle.


        :param model_year: The model_year of this Vehicle.
        :type model_year: float
        """

        self._model_year = model_year

    @property
    def has_traction_enabled(self) -> bool:
        """Gets the has_traction_enabled of this Vehicle.


        :return: The has_traction_enabled of this Vehicle.
        :rtype: bool
        """
        return self._has_traction_enabled

    @has_traction_enabled.setter
    def has_traction_enabled(self, has_traction_enabled: bool):
        """Sets the has_traction_enabled of this Vehicle.


        :param has_traction_enabled: The has_traction_enabled of this Vehicle.
        :type has_traction_enabled: bool
        """

        self._has_traction_enabled = has_traction_enabled

    @property
    def has_immobilizer(self) -> bool:
        """Gets the has_immobilizer of this Vehicle.


        :return: The has_immobilizer of this Vehicle.
        :rtype: bool
        """
        return self._has_immobilizer

    @has_immobilizer.setter
    def has_immobilizer(self, has_immobilizer: bool):
        """Sets the has_immobilizer of this Vehicle.


        :param has_immobilizer: The has_immobilizer of this Vehicle.
        :type has_immobilizer: bool
        """

        self._has_immobilizer = has_immobilizer

    @property
    def has_theft_detection(self) -> bool:
        """Gets the has_theft_detection of this Vehicle.


        :return: The has_theft_detection of this Vehicle.
        :rtype: bool
        """
        return self._has_theft_detection

    @has_theft_detection.setter
    def has_theft_detection(self, has_theft_detection: bool):
        """Sets the has_theft_detection of this Vehicle.


        :param has_theft_detection: The has_theft_detection of this Vehicle.
        :type has_theft_detection: bool
        """

        self._has_theft_detection = has_theft_detection

    @property
    def current_mileage_dynamic(self) -> float:
        """Gets the current_mileage_dynamic of this Vehicle.


        :return: The current_mileage_dynamic of this Vehicle.
        :rtype: float
        """
        return self._current_mileage_dynamic

    @current_mileage_dynamic.setter
    def current_mileage_dynamic(self, current_mileage_dynamic: float):
        """Sets the current_mileage_dynamic of this Vehicle.


        :param current_mileage_dynamic: The current_mileage_dynamic of this Vehicle.
        :type current_mileage_dynamic: float
        """

        self._current_mileage_dynamic = current_mileage_dynamic

    @property
    def yearly_milage_dynamic(self) -> float:
        """Gets the yearly_milage_dynamic of this Vehicle.


        :return: The yearly_milage_dynamic of this Vehicle.
        :rtype: float
        """
        return self._yearly_milage_dynamic

    @yearly_milage_dynamic.setter
    def yearly_milage_dynamic(self, yearly_milage_dynamic: float):
        """Sets the yearly_milage_dynamic of this Vehicle.


        :param yearly_milage_dynamic: The yearly_milage_dynamic of this Vehicle.
        :type yearly_milage_dynamic: float
        """

        self._yearly_milage_dynamic = yearly_milage_dynamic

    @property
    def highway_yearly_milage_dynamic(self) -> float:
        """Gets the highway_yearly_milage_dynamic of this Vehicle.


        :return: The highway_yearly_milage_dynamic of this Vehicle.
        :rtype: float
        """
        return self._highway_yearly_milage_dynamic

    @highway_yearly_milage_dynamic.setter
    def highway_yearly_milage_dynamic(self, highway_yearly_milage_dynamic: float):
        """Sets the highway_yearly_milage_dynamic of this Vehicle.


        :param highway_yearly_milage_dynamic: The highway_yearly_milage_dynamic of this Vehicle.
        :type highway_yearly_milage_dynamic: float
        """

        self._highway_yearly_milage_dynamic = highway_yearly_milage_dynamic

    @property
    def daily_milage_dynamic(self) -> float:
        """Gets the daily_milage_dynamic of this Vehicle.


        :return: The daily_milage_dynamic of this Vehicle.
        :rtype: float
        """
        return self._daily_milage_dynamic

    @daily_milage_dynamic.setter
    def daily_milage_dynamic(self, daily_milage_dynamic: float):
        """Sets the daily_milage_dynamic of this Vehicle.


        :param daily_milage_dynamic: The daily_milage_dynamic of this Vehicle.
        :type daily_milage_dynamic: float
        """

        self._daily_milage_dynamic = daily_milage_dynamic

    @property
    def service_history(self) -> float:
        """Gets the service_history of this Vehicle.


        :return: The service_history of this Vehicle.
        :rtype: float
        """
        return self._service_history

    @service_history.setter
    def service_history(self, service_history: float):
        """Sets the service_history of this Vehicle.


        :param service_history: The service_history of this Vehicle.
        :type service_history: float
        """

        self._service_history = service_history

    @property
    def service_due(self) -> float:
        """Gets the service_due of this Vehicle.


        :return: The service_due of this Vehicle.
        :rtype: float
        """
        return self._service_due

    @service_due.setter
    def service_due(self, service_due: float):
        """Sets the service_due of this Vehicle.


        :param service_due: The service_due of this Vehicle.
        :type service_due: float
        """

        self._service_due = service_due

    @property
    def time_to_service(self) -> float:
        """Gets the time_to_service of this Vehicle.


        :return: The time_to_service of this Vehicle.
        :rtype: float
        """
        return self._time_to_service

    @time_to_service.setter
    def time_to_service(self, time_to_service: float):
        """Sets the time_to_service of this Vehicle.


        :param time_to_service: The time_to_service of this Vehicle.
        :type time_to_service: float
        """

        self._time_to_service = time_to_service

    @property
    def recall_history(self) -> float:
        """Gets the recall_history of this Vehicle.


        :return: The recall_history of this Vehicle.
        :rtype: float
        """
        return self._recall_history

    @recall_history.setter
    def recall_history(self, recall_history: float):
        """Sets the recall_history of this Vehicle.


        :param recall_history: The recall_history of this Vehicle.
        :type recall_history: float
        """

        self._recall_history = recall_history

    @property
    def traction_control_engaged(self) -> bool:
        """Gets the traction_control_engaged of this Vehicle.


        :return: The traction_control_engaged of this Vehicle.
        :rtype: bool
        """
        return self._traction_control_engaged

    @traction_control_engaged.setter
    def traction_control_engaged(self, traction_control_engaged: bool):
        """Sets the traction_control_engaged of this Vehicle.


        :param traction_control_engaged: The traction_control_engaged of this Vehicle.
        :type traction_control_engaged: bool
        """

        self._traction_control_engaged = traction_control_engaged

    @property
    def acceleration_longitudinal(self) -> float:
        """Gets the acceleration_longitudinal of this Vehicle.


        :return: The acceleration_longitudinal of this Vehicle.
        :rtype: float
        """
        return self._acceleration_longitudinal

    @acceleration_longitudinal.setter
    def acceleration_longitudinal(self, acceleration_longitudinal: float):
        """Sets the acceleration_longitudinal of this Vehicle.


        :param acceleration_longitudinal: The acceleration_longitudinal of this Vehicle.
        :type acceleration_longitudinal: float
        """

        self._acceleration_longitudinal = acceleration_longitudinal

    @property
    def acceleration_lateral(self) -> float:
        """Gets the acceleration_lateral of this Vehicle.


        :return: The acceleration_lateral of this Vehicle.
        :rtype: float
        """
        return self._acceleration_lateral

    @acceleration_lateral.setter
    def acceleration_lateral(self, acceleration_lateral: float):
        """Sets the acceleration_lateral of this Vehicle.


        :param acceleration_lateral: The acceleration_lateral of this Vehicle.
        :type acceleration_lateral: float
        """

        self._acceleration_lateral = acceleration_lateral

    @property
    def acceleration_vertical(self) -> float:
        """Gets the acceleration_vertical of this Vehicle.


        :return: The acceleration_vertical of this Vehicle.
        :rtype: float
        """
        return self._acceleration_vertical

    @acceleration_vertical.setter
    def acceleration_vertical(self, acceleration_vertical: float):
        """Sets the acceleration_vertical of this Vehicle.


        :param acceleration_vertical: The acceleration_vertical of this Vehicle.
        :type acceleration_vertical: float
        """

        self._acceleration_vertical = acceleration_vertical

    @property
    def braking_frequency(self) -> float:
        """Gets the braking_frequency of this Vehicle.


        :return: The braking_frequency of this Vehicle.
        :rtype: float
        """
        return self._braking_frequency

    @braking_frequency.setter
    def braking_frequency(self, braking_frequency: float):
        """Sets the braking_frequency of this Vehicle.


        :param braking_frequency: The braking_frequency of this Vehicle.
        :type braking_frequency: float
        """

        self._braking_frequency = braking_frequency

    @property
    def brake_pedal_force(self) -> float:
        """Gets the brake_pedal_force of this Vehicle.


        :return: The brake_pedal_force of this Vehicle.
        :rtype: float
        """
        return self._brake_pedal_force

    @brake_pedal_force.setter
    def brake_pedal_force(self, brake_pedal_force: float):
        """Sets the brake_pedal_force of this Vehicle.


        :param brake_pedal_force: The brake_pedal_force of this Vehicle.
        :type brake_pedal_force: float
        """

        self._brake_pedal_force = brake_pedal_force

    @property
    def brake_pedal_speed(self) -> float:
        """Gets the brake_pedal_speed of this Vehicle.


        :return: The brake_pedal_speed of this Vehicle.
        :rtype: float
        """
        return self._brake_pedal_speed

    @brake_pedal_speed.setter
    def brake_pedal_speed(self, brake_pedal_speed: float):
        """Sets the brake_pedal_speed of this Vehicle.


        :param brake_pedal_speed: The brake_pedal_speed of this Vehicle.
        :type brake_pedal_speed: float
        """

        self._brake_pedal_speed = brake_pedal_speed

    @property
    def performance_mode(self) -> float:
        """Gets the performance_mode of this Vehicle.


        :return: The performance_mode of this Vehicle.
        :rtype: float
        """
        return self._performance_mode

    @performance_mode.setter
    def performance_mode(self, performance_mode: float):
        """Sets the performance_mode of this Vehicle.


        :param performance_mode: The performance_mode of this Vehicle.
        :type performance_mode: float
        """

        self._performance_mode = performance_mode

    @property
    def emergency_braking(self) -> float:
        """Gets the emergency_braking of this Vehicle.


        :return: The emergency_braking of this Vehicle.
        :rtype: float
        """
        return self._emergency_braking

    @emergency_braking.setter
    def emergency_braking(self, emergency_braking: float):
        """Sets the emergency_braking of this Vehicle.


        :param emergency_braking: The emergency_braking of this Vehicle.
        :type emergency_braking: float
        """

        self._emergency_braking = emergency_braking

    @property
    def engnition_on(self) -> bool:
        """Gets the engnition_on of this Vehicle.


        :return: The engnition_on of this Vehicle.
        :rtype: bool
        """
        return self._engnition_on

    @engnition_on.setter
    def engnition_on(self, engnition_on: bool):
        """Sets the engnition_on of this Vehicle.


        :param engnition_on: The engnition_on of this Vehicle.
        :type engnition_on: bool
        """

        self._engnition_on = engnition_on

    @property
    def engnition_off(self) -> bool:
        """Gets the engnition_off of this Vehicle.


        :return: The engnition_off of this Vehicle.
        :rtype: bool
        """
        return self._engnition_off

    @engnition_off.setter
    def engnition_off(self, engnition_off: bool):
        """Sets the engnition_off of this Vehicle.


        :param engnition_off: The engnition_off of this Vehicle.
        :type engnition_off: bool
        """

        self._engnition_off = engnition_off

    @property
    def ignition_on_time(self) -> float:
        """Gets the ignition_on_time of this Vehicle.


        :return: The ignition_on_time of this Vehicle.
        :rtype: float
        """
        return self._ignition_on_time

    @ignition_on_time.setter
    def ignition_on_time(self, ignition_on_time: float):
        """Sets the ignition_on_time of this Vehicle.


        :param ignition_on_time: The ignition_on_time of this Vehicle.
        :type ignition_on_time: float
        """

        self._ignition_on_time = ignition_on_time

    @property
    def ignition_off_time(self) -> float:
        """Gets the ignition_off_time of this Vehicle.


        :return: The ignition_off_time of this Vehicle.
        :rtype: float
        """
        return self._ignition_off_time

    @ignition_off_time.setter
    def ignition_off_time(self, ignition_off_time: float):
        """Sets the ignition_off_time of this Vehicle.


        :param ignition_off_time: The ignition_off_time of this Vehicle.
        :type ignition_off_time: float
        """

        self._ignition_off_time = ignition_off_time

    @property
    def logitude(self) -> float:
        """Gets the logitude of this Vehicle.


        :return: The logitude of this Vehicle.
        :rtype: float
        """
        return self._logitude

    @logitude.setter
    def logitude(self, logitude: float):
        """Sets the logitude of this Vehicle.


        :param logitude: The logitude of this Vehicle.
        :type logitude: float
        """

        self._logitude = logitude

    @property
    def latitude(self) -> float:
        """Gets the latitude of this Vehicle.


        :return: The latitude of this Vehicle.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """Sets the latitude of this Vehicle.


        :param latitude: The latitude of this Vehicle.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def altitude(self) -> float:
        """Gets the altitude of this Vehicle.


        :return: The altitude of this Vehicle.
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude: float):
        """Sets the altitude of this Vehicle.


        :param altitude: The altitude of this Vehicle.
        :type altitude: float
        """

        self._altitude = altitude

    @property
    def heading(self) -> float:
        """Gets the heading of this Vehicle.


        :return: The heading of this Vehicle.
        :rtype: float
        """
        return self._heading

    @heading.setter
    def heading(self, heading: float):
        """Sets the heading of this Vehicle.


        :param heading: The heading of this Vehicle.
        :type heading: float
        """

        self._heading = heading

    @property
    def is_moving(self) -> bool:
        """Gets the is_moving of this Vehicle.


        :return: The is_moving of this Vehicle.
        :rtype: bool
        """
        return self._is_moving

    @is_moving.setter
    def is_moving(self, is_moving: bool):
        """Sets the is_moving of this Vehicle.


        :param is_moving: The is_moving of this Vehicle.
        :type is_moving: bool
        """

        self._is_moving = is_moving

    @property
    def horn_is_active(self) -> bool:
        """Gets the horn_is_active of this Vehicle.


        :return: The horn_is_active of this Vehicle.
        :rtype: bool
        """
        return self._horn_is_active

    @horn_is_active.setter
    def horn_is_active(self, horn_is_active: bool):
        """Sets the horn_is_active of this Vehicle.


        :param horn_is_active: The horn_is_active of this Vehicle.
        :type horn_is_active: bool
        """

        self._horn_is_active = horn_is_active

    @property
    def driving_speed(self) -> float:
        """Gets the driving_speed of this Vehicle.


        :return: The driving_speed of this Vehicle.
        :rtype: float
        """
        return self._driving_speed

    @driving_speed.setter
    def driving_speed(self, driving_speed: float):
        """Sets the driving_speed of this Vehicle.


        :param driving_speed: The driving_speed of this Vehicle.
        :type driving_speed: float
        """

        self._driving_speed = driving_speed

    @property
    def wheel_spin(self) -> float:
        """Gets the wheel_spin of this Vehicle.


        :return: The wheel_spin of this Vehicle.
        :rtype: float
        """
        return self._wheel_spin

    @wheel_spin.setter
    def wheel_spin(self, wheel_spin: float):
        """Sets the wheel_spin of this Vehicle.


        :param wheel_spin: The wheel_spin of this Vehicle.
        :type wheel_spin: float
        """

        self._wheel_spin = wheel_spin

    @property
    def decelration_rate(self) -> float:
        """Gets the decelration_rate of this Vehicle.


        :return: The decelration_rate of this Vehicle.
        :rtype: float
        """
        return self._decelration_rate

    @decelration_rate.setter
    def decelration_rate(self, decelration_rate: float):
        """Sets the decelration_rate of this Vehicle.


        :param decelration_rate: The decelration_rate of this Vehicle.
        :type decelration_rate: float
        """

        self._decelration_rate = decelration_rate

    @property
    def steering_speed_turn(self) -> float:
        """Gets the steering_speed_turn of this Vehicle.


        :return: The steering_speed_turn of this Vehicle.
        :rtype: float
        """
        return self._steering_speed_turn

    @steering_speed_turn.setter
    def steering_speed_turn(self, steering_speed_turn: float):
        """Sets the steering_speed_turn of this Vehicle.


        :param steering_speed_turn: The steering_speed_turn of this Vehicle.
        :type steering_speed_turn: float
        """

        self._steering_speed_turn = steering_speed_turn

    @property
    def lane_departure_warnning(self) -> float:
        """Gets the lane_departure_warnning of this Vehicle.


        :return: The lane_departure_warnning of this Vehicle.
        :rtype: float
        """
        return self._lane_departure_warnning

    @lane_departure_warnning.setter
    def lane_departure_warnning(self, lane_departure_warnning: float):
        """Sets the lane_departure_warnning of this Vehicle.


        :param lane_departure_warnning: The lane_departure_warnning of this Vehicle.
        :type lane_departure_warnning: float
        """

        self._lane_departure_warnning = lane_departure_warnning

    @property
    def adas_abs_is_active(self) -> bool:
        """Gets the adas_abs_is_active of this Vehicle.


        :return: The adas_abs_is_active of this Vehicle.
        :rtype: bool
        """
        return self._adas_abs_is_active

    @adas_abs_is_active.setter
    def adas_abs_is_active(self, adas_abs_is_active: bool):
        """Sets the adas_abs_is_active of this Vehicle.


        :param adas_abs_is_active: The adas_abs_is_active of this Vehicle.
        :type adas_abs_is_active: bool
        """

        self._adas_abs_is_active = adas_abs_is_active

    @property
    def obstacle_detection_is_active(self) -> bool:
        """Gets the obstacle_detection_is_active of this Vehicle.


        :return: The obstacle_detection_is_active of this Vehicle.
        :rtype: bool
        """
        return self._obstacle_detection_is_active

    @obstacle_detection_is_active.setter
    def obstacle_detection_is_active(self, obstacle_detection_is_active: bool):
        """Sets the obstacle_detection_is_active of this Vehicle.


        :param obstacle_detection_is_active: The obstacle_detection_is_active of this Vehicle.
        :type obstacle_detection_is_active: bool
        """

        self._obstacle_detection_is_active = obstacle_detection_is_active

    @property
    def driver_intervention(self) -> bool:
        """Gets the driver_intervention of this Vehicle.


        :return: The driver_intervention of this Vehicle.
        :rtype: bool
        """
        return self._driver_intervention

    @driver_intervention.setter
    def driver_intervention(self, driver_intervention: bool):
        """Sets the driver_intervention of this Vehicle.


        :param driver_intervention: The driver_intervention of this Vehicle.
        :type driver_intervention: bool
        """

        self._driver_intervention = driver_intervention

    @property
    def obstacle_detection_warning(self) -> str:
        """Gets the obstacle_detection_warning of this Vehicle.


        :return: The obstacle_detection_warning of this Vehicle.
        :rtype: str
        """
        return self._obstacle_detection_warning

    @obstacle_detection_warning.setter
    def obstacle_detection_warning(self, obstacle_detection_warning: str):
        """Sets the obstacle_detection_warning of this Vehicle.


        :param obstacle_detection_warning: The obstacle_detection_warning of this Vehicle.
        :type obstacle_detection_warning: str
        """

        self._obstacle_detection_warning = obstacle_detection_warning

    @property
    def speed_set(self) -> float:
        """Gets the speed_set of this Vehicle.


        :return: The speed_set of this Vehicle.
        :rtype: float
        """
        return self._speed_set

    @speed_set.setter
    def speed_set(self, speed_set: float):
        """Sets the speed_set of this Vehicle.


        :param speed_set: The speed_set of this Vehicle.
        :type speed_set: float
        """

        self._speed_set = speed_set

    @property
    def yaw(self) -> float:
        """Gets the yaw of this Vehicle.


        :return: The yaw of this Vehicle.
        :rtype: float
        """
        return self._yaw

    @yaw.setter
    def yaw(self, yaw: float):
        """Sets the yaw of this Vehicle.


        :param yaw: The yaw of this Vehicle.
        :type yaw: float
        """

        self._yaw = yaw

    @property
    def pitch(self) -> float:
        """Gets the pitch of this Vehicle.


        :return: The pitch of this Vehicle.
        :rtype: float
        """
        return self._pitch

    @pitch.setter
    def pitch(self, pitch: float):
        """Sets the pitch of this Vehicle.


        :param pitch: The pitch of this Vehicle.
        :type pitch: float
        """

        self._pitch = pitch

    @property
    def roll(self) -> float:
        """Gets the roll of this Vehicle.


        :return: The roll of this Vehicle.
        :rtype: float
        """
        return self._roll

    @roll.setter
    def roll(self, roll: float):
        """Sets the roll of this Vehicle.


        :param roll: The roll of this Vehicle.
        :type roll: float
        """

        self._roll = roll

    @property
    def g_force(self) -> float:
        """Gets the g_force of this Vehicle.


        :return: The g_force of this Vehicle.
        :rtype: float
        """
        return self._g_force

    @g_force.setter
    def g_force(self, g_force: float):
        """Sets the g_force of this Vehicle.


        :param g_force: The g_force of this Vehicle.
        :type g_force: float
        """

        self._g_force = g_force

    @property
    def trailer_included(self) -> bool:
        """Gets the trailer_included of this Vehicle.


        :return: The trailer_included of this Vehicle.
        :rtype: bool
        """
        return self._trailer_included

    @trailer_included.setter
    def trailer_included(self, trailer_included: bool):
        """Sets the trailer_included of this Vehicle.


        :param trailer_included: The trailer_included of this Vehicle.
        :type trailer_included: bool
        """

        self._trailer_included = trailer_included

    @property
    def row1_pos1_isbelted(self) -> bool:
        """Gets the row1_pos1_isbelted of this Vehicle.


        :return: The row1_pos1_isbelted of this Vehicle.
        :rtype: bool
        """
        return self._row1_pos1_isbelted

    @row1_pos1_isbelted.setter
    def row1_pos1_isbelted(self, row1_pos1_isbelted: bool):
        """Sets the row1_pos1_isbelted of this Vehicle.


        :param row1_pos1_isbelted: The row1_pos1_isbelted of this Vehicle.
        :type row1_pos1_isbelted: bool
        """

        self._row1_pos1_isbelted = row1_pos1_isbelted

    @property
    def row1_pos2_isbelted(self) -> bool:
        """Gets the row1_pos2_isbelted of this Vehicle.


        :return: The row1_pos2_isbelted of this Vehicle.
        :rtype: bool
        """
        return self._row1_pos2_isbelted

    @row1_pos2_isbelted.setter
    def row1_pos2_isbelted(self, row1_pos2_isbelted: bool):
        """Sets the row1_pos2_isbelted of this Vehicle.


        :param row1_pos2_isbelted: The row1_pos2_isbelted of this Vehicle.
        :type row1_pos2_isbelted: bool
        """

        self._row1_pos2_isbelted = row1_pos2_isbelted

    @property
    def row2_pos1_isbelted(self) -> bool:
        """Gets the row2_pos1_isbelted of this Vehicle.


        :return: The row2_pos1_isbelted of this Vehicle.
        :rtype: bool
        """
        return self._row2_pos1_isbelted

    @row2_pos1_isbelted.setter
    def row2_pos1_isbelted(self, row2_pos1_isbelted: bool):
        """Sets the row2_pos1_isbelted of this Vehicle.


        :param row2_pos1_isbelted: The row2_pos1_isbelted of this Vehicle.
        :type row2_pos1_isbelted: bool
        """

        self._row2_pos1_isbelted = row2_pos1_isbelted

    @property
    def row2_pos2_isbelted(self) -> bool:
        """Gets the row2_pos2_isbelted of this Vehicle.


        :return: The row2_pos2_isbelted of this Vehicle.
        :rtype: bool
        """
        return self._row2_pos2_isbelted

    @row2_pos2_isbelted.setter
    def row2_pos2_isbelted(self, row2_pos2_isbelted: bool):
        """Sets the row2_pos2_isbelted of this Vehicle.


        :param row2_pos2_isbelted: The row2_pos2_isbelted of this Vehicle.
        :type row2_pos2_isbelted: bool
        """

        self._row2_pos2_isbelted = row2_pos2_isbelted

    @property
    def cabin_temp(self) -> float:
        """Gets the cabin_temp of this Vehicle.


        :return: The cabin_temp of this Vehicle.
        :rtype: float
        """
        return self._cabin_temp

    @cabin_temp.setter
    def cabin_temp(self, cabin_temp: float):
        """Sets the cabin_temp of this Vehicle.


        :param cabin_temp: The cabin_temp of this Vehicle.
        :type cabin_temp: float
        """

        self._cabin_temp = cabin_temp

    @property
    def cabin_humidity(self) -> float:
        """Gets the cabin_humidity of this Vehicle.


        :return: The cabin_humidity of this Vehicle.
        :rtype: float
        """
        return self._cabin_humidity

    @cabin_humidity.setter
    def cabin_humidity(self, cabin_humidity: float):
        """Sets the cabin_humidity of this Vehicle.


        :param cabin_humidity: The cabin_humidity of this Vehicle.
        :type cabin_humidity: float
        """

        self._cabin_humidity = cabin_humidity

    @property
    def tire_condition_row1_left(self) -> str:
        """Gets the tire_condition_row1_left of this Vehicle.


        :return: The tire_condition_row1_left of this Vehicle.
        :rtype: str
        """
        return self._tire_condition_row1_left

    @tire_condition_row1_left.setter
    def tire_condition_row1_left(self, tire_condition_row1_left: str):
        """Sets the tire_condition_row1_left of this Vehicle.


        :param tire_condition_row1_left: The tire_condition_row1_left of this Vehicle.
        :type tire_condition_row1_left: str
        """

        self._tire_condition_row1_left = tire_condition_row1_left

    @property
    def tire_condition_row1_right(self) -> str:
        """Gets the tire_condition_row1_right of this Vehicle.


        :return: The tire_condition_row1_right of this Vehicle.
        :rtype: str
        """
        return self._tire_condition_row1_right

    @tire_condition_row1_right.setter
    def tire_condition_row1_right(self, tire_condition_row1_right: str):
        """Sets the tire_condition_row1_right of this Vehicle.


        :param tire_condition_row1_right: The tire_condition_row1_right of this Vehicle.
        :type tire_condition_row1_right: str
        """

        self._tire_condition_row1_right = tire_condition_row1_right

    @property
    def tire_condition_row2_left(self) -> str:
        """Gets the tire_condition_row2_left of this Vehicle.


        :return: The tire_condition_row2_left of this Vehicle.
        :rtype: str
        """
        return self._tire_condition_row2_left

    @tire_condition_row2_left.setter
    def tire_condition_row2_left(self, tire_condition_row2_left: str):
        """Sets the tire_condition_row2_left of this Vehicle.


        :param tire_condition_row2_left: The tire_condition_row2_left of this Vehicle.
        :type tire_condition_row2_left: str
        """

        self._tire_condition_row2_left = tire_condition_row2_left

    @property
    def tire_condition_row2_right(self) -> str:
        """Gets the tire_condition_row2_right of this Vehicle.


        :return: The tire_condition_row2_right of this Vehicle.
        :rtype: str
        """
        return self._tire_condition_row2_right

    @tire_condition_row2_right.setter
    def tire_condition_row2_right(self, tire_condition_row2_right: str):
        """Sets the tire_condition_row2_right of this Vehicle.


        :param tire_condition_row2_right: The tire_condition_row2_right of this Vehicle.
        :type tire_condition_row2_right: str
        """

        self._tire_condition_row2_right = tire_condition_row2_right

    @property
    def tire_pressure_row1_left(self) -> str:
        """Gets the tire_pressure_row1_left of this Vehicle.


        :return: The tire_pressure_row1_left of this Vehicle.
        :rtype: str
        """
        return self._tire_pressure_row1_left

    @tire_pressure_row1_left.setter
    def tire_pressure_row1_left(self, tire_pressure_row1_left: str):
        """Sets the tire_pressure_row1_left of this Vehicle.


        :param tire_pressure_row1_left: The tire_pressure_row1_left of this Vehicle.
        :type tire_pressure_row1_left: str
        """

        self._tire_pressure_row1_left = tire_pressure_row1_left

    @property
    def tire_pressure_row1_right(self) -> str:
        """Gets the tire_pressure_row1_right of this Vehicle.


        :return: The tire_pressure_row1_right of this Vehicle.
        :rtype: str
        """
        return self._tire_pressure_row1_right

    @tire_pressure_row1_right.setter
    def tire_pressure_row1_right(self, tire_pressure_row1_right: str):
        """Sets the tire_pressure_row1_right of this Vehicle.


        :param tire_pressure_row1_right: The tire_pressure_row1_right of this Vehicle.
        :type tire_pressure_row1_right: str
        """

        self._tire_pressure_row1_right = tire_pressure_row1_right

    @property
    def tire_pressure_row2_left(self) -> str:
        """Gets the tire_pressure_row2_left of this Vehicle.


        :return: The tire_pressure_row2_left of this Vehicle.
        :rtype: str
        """
        return self._tire_pressure_row2_left

    @tire_pressure_row2_left.setter
    def tire_pressure_row2_left(self, tire_pressure_row2_left: str):
        """Sets the tire_pressure_row2_left of this Vehicle.


        :param tire_pressure_row2_left: The tire_pressure_row2_left of this Vehicle.
        :type tire_pressure_row2_left: str
        """

        self._tire_pressure_row2_left = tire_pressure_row2_left

    @property
    def tire_pressure_row2_right(self) -> str:
        """Gets the tire_pressure_row2_right of this Vehicle.


        :return: The tire_pressure_row2_right of this Vehicle.
        :rtype: str
        """
        return self._tire_pressure_row2_right

    @tire_pressure_row2_right.setter
    def tire_pressure_row2_right(self, tire_pressure_row2_right: str):
        """Sets the tire_pressure_row2_right of this Vehicle.


        :param tire_pressure_row2_right: The tire_pressure_row2_right of this Vehicle.
        :type tire_pressure_row2_right: str
        """

        self._tire_pressure_row2_right = tire_pressure_row2_right

    @property
    def brake_pad_wear_row1_left(self) -> str:
        """Gets the brake_pad_wear_row1_left of this Vehicle.


        :return: The brake_pad_wear_row1_left of this Vehicle.
        :rtype: str
        """
        return self._brake_pad_wear_row1_left

    @brake_pad_wear_row1_left.setter
    def brake_pad_wear_row1_left(self, brake_pad_wear_row1_left: str):
        """Sets the brake_pad_wear_row1_left of this Vehicle.


        :param brake_pad_wear_row1_left: The brake_pad_wear_row1_left of this Vehicle.
        :type brake_pad_wear_row1_left: str
        """

        self._brake_pad_wear_row1_left = brake_pad_wear_row1_left

    @property
    def brake_pad_wear_row1_right(self) -> str:
        """Gets the brake_pad_wear_row1_right of this Vehicle.


        :return: The brake_pad_wear_row1_right of this Vehicle.
        :rtype: str
        """
        return self._brake_pad_wear_row1_right

    @brake_pad_wear_row1_right.setter
    def brake_pad_wear_row1_right(self, brake_pad_wear_row1_right: str):
        """Sets the brake_pad_wear_row1_right of this Vehicle.


        :param brake_pad_wear_row1_right: The brake_pad_wear_row1_right of this Vehicle.
        :type brake_pad_wear_row1_right: str
        """

        self._brake_pad_wear_row1_right = brake_pad_wear_row1_right

    @property
    def brake_pad_wear_row2_left(self) -> str:
        """Gets the brake_pad_wear_row2_left of this Vehicle.


        :return: The brake_pad_wear_row2_left of this Vehicle.
        :rtype: str
        """
        return self._brake_pad_wear_row2_left

    @brake_pad_wear_row2_left.setter
    def brake_pad_wear_row2_left(self, brake_pad_wear_row2_left: str):
        """Sets the brake_pad_wear_row2_left of this Vehicle.


        :param brake_pad_wear_row2_left: The brake_pad_wear_row2_left of this Vehicle.
        :type brake_pad_wear_row2_left: str
        """

        self._brake_pad_wear_row2_left = brake_pad_wear_row2_left

    @property
    def brake_pad_wear_row2_right(self) -> str:
        """Gets the brake_pad_wear_row2_right of this Vehicle.


        :return: The brake_pad_wear_row2_right of this Vehicle.
        :rtype: str
        """
        return self._brake_pad_wear_row2_right

    @brake_pad_wear_row2_right.setter
    def brake_pad_wear_row2_right(self, brake_pad_wear_row2_right: str):
        """Sets the brake_pad_wear_row2_right of this Vehicle.


        :param brake_pad_wear_row2_right: The brake_pad_wear_row2_right of this Vehicle.
        :type brake_pad_wear_row2_right: str
        """

        self._brake_pad_wear_row2_right = brake_pad_wear_row2_right

    @property
    def brakes_wear_row1_right(self) -> str:
        """Gets the brakes_wear_row1_right of this Vehicle.


        :return: The brakes_wear_row1_right of this Vehicle.
        :rtype: str
        """
        return self._brakes_wear_row1_right

    @brakes_wear_row1_right.setter
    def brakes_wear_row1_right(self, brakes_wear_row1_right: str):
        """Sets the brakes_wear_row1_right of this Vehicle.


        :param brakes_wear_row1_right: The brakes_wear_row1_right of this Vehicle.
        :type brakes_wear_row1_right: str
        """

        self._brakes_wear_row1_right = brakes_wear_row1_right

    @property
    def brakes_wear_row1_left(self) -> str:
        """Gets the brakes_wear_row1_left of this Vehicle.


        :return: The brakes_wear_row1_left of this Vehicle.
        :rtype: str
        """
        return self._brakes_wear_row1_left

    @brakes_wear_row1_left.setter
    def brakes_wear_row1_left(self, brakes_wear_row1_left: str):
        """Sets the brakes_wear_row1_left of this Vehicle.


        :param brakes_wear_row1_left: The brakes_wear_row1_left of this Vehicle.
        :type brakes_wear_row1_left: str
        """

        self._brakes_wear_row1_left = brakes_wear_row1_left

    @property
    def brake_wear_row2_left(self) -> str:
        """Gets the brake_wear_row2_left of this Vehicle.


        :return: The brake_wear_row2_left of this Vehicle.
        :rtype: str
        """
        return self._brake_wear_row2_left

    @brake_wear_row2_left.setter
    def brake_wear_row2_left(self, brake_wear_row2_left: str):
        """Sets the brake_wear_row2_left of this Vehicle.


        :param brake_wear_row2_left: The brake_wear_row2_left of this Vehicle.
        :type brake_wear_row2_left: str
        """

        self._brake_wear_row2_left = brake_wear_row2_left

    @property
    def brake_wear_row2_right(self) -> str:
        """Gets the brake_wear_row2_right of this Vehicle.


        :return: The brake_wear_row2_right of this Vehicle.
        :rtype: str
        """
        return self._brake_wear_row2_right

    @brake_wear_row2_right.setter
    def brake_wear_row2_right(self, brake_wear_row2_right: str):
        """Sets the brake_wear_row2_right of this Vehicle.


        :param brake_wear_row2_right: The brake_wear_row2_right of this Vehicle.
        :type brake_wear_row2_right: str
        """

        self._brake_wear_row2_right = brake_wear_row2_right

    @property
    def clutch_wear(self) -> float:
        """Gets the clutch_wear of this Vehicle.


        :return: The clutch_wear of this Vehicle.
        :rtype: float
        """
        return self._clutch_wear

    @clutch_wear.setter
    def clutch_wear(self, clutch_wear: float):
        """Sets the clutch_wear of this Vehicle.


        :param clutch_wear: The clutch_wear of this Vehicle.
        :type clutch_wear: float
        """

        self._clutch_wear = clutch_wear

    @property
    def dashboard_warnning(self) -> str:
        """Gets the dashboard_warnning of this Vehicle.


        :return: The dashboard_warnning of this Vehicle.
        :rtype: str
        """
        return self._dashboard_warnning

    @dashboard_warnning.setter
    def dashboard_warnning(self, dashboard_warnning: str):
        """Sets the dashboard_warnning of this Vehicle.


        :param dashboard_warnning: The dashboard_warnning of this Vehicle.
        :type dashboard_warnning: str
        """

        self._dashboard_warnning = dashboard_warnning

    @property
    def has_airbag_deployed(self) -> bool:
        """Gets the has_airbag_deployed of this Vehicle.


        :return: The has_airbag_deployed of this Vehicle.
        :rtype: bool
        """
        return self._has_airbag_deployed

    @has_airbag_deployed.setter
    def has_airbag_deployed(self, has_airbag_deployed: bool):
        """Sets the has_airbag_deployed of this Vehicle.


        :param has_airbag_deployed: The has_airbag_deployed of this Vehicle.
        :type has_airbag_deployed: bool
        """

        self._has_airbag_deployed = has_airbag_deployed

    @property
    def has_brakes_error(self) -> bool:
        """Gets the has_brakes_error of this Vehicle.


        :return: The has_brakes_error of this Vehicle.
        :rtype: bool
        """
        return self._has_brakes_error

    @has_brakes_error.setter
    def has_brakes_error(self, has_brakes_error: bool):
        """Sets the has_brakes_error of this Vehicle.


        :param has_brakes_error: The has_brakes_error of this Vehicle.
        :type has_brakes_error: bool
        """

        self._has_brakes_error = has_brakes_error

    @property
    def engine_warning(self) -> str:
        """Gets the engine_warning of this Vehicle.


        :return: The engine_warning of this Vehicle.
        :rtype: str
        """
        return self._engine_warning

    @engine_warning.setter
    def engine_warning(self, engine_warning: str):
        """Sets the engine_warning of this Vehicle.


        :param engine_warning: The engine_warning of this Vehicle.
        :type engine_warning: str
        """

        self._engine_warning = engine_warning

    @property
    def known_vehicle_damage(self) -> str:
        """Gets the known_vehicle_damage of this Vehicle.


        :return: The known_vehicle_damage of this Vehicle.
        :rtype: str
        """
        return self._known_vehicle_damage

    @known_vehicle_damage.setter
    def known_vehicle_damage(self, known_vehicle_damage: str):
        """Sets the known_vehicle_damage of this Vehicle.


        :param known_vehicle_damage: The known_vehicle_damage of this Vehicle.
        :type known_vehicle_damage: str
        """

        self._known_vehicle_damage = known_vehicle_damage

    @property
    def damaged_parts(self) -> str:
        """Gets the damaged_parts of this Vehicle.


        :return: The damaged_parts of this Vehicle.
        :rtype: str
        """
        return self._damaged_parts

    @damaged_parts.setter
    def damaged_parts(self, damaged_parts: str):
        """Sets the damaged_parts of this Vehicle.


        :param damaged_parts: The damaged_parts of this Vehicle.
        :type damaged_parts: str
        """

        self._damaged_parts = damaged_parts

    @property
    def damaged_parts_cost(self) -> float:
        """Gets the damaged_parts_cost of this Vehicle.


        :return: The damaged_parts_cost of this Vehicle.
        :rtype: float
        """
        return self._damaged_parts_cost

    @damaged_parts_cost.setter
    def damaged_parts_cost(self, damaged_parts_cost: float):
        """Sets the damaged_parts_cost of this Vehicle.


        :param damaged_parts_cost: The damaged_parts_cost of this Vehicle.
        :type damaged_parts_cost: float
        """

        self._damaged_parts_cost = damaged_parts_cost

    @property
    def upcoming_service(self) -> date:
        """Gets the upcoming_service of this Vehicle.


        :return: The upcoming_service of this Vehicle.
        :rtype: date
        """
        return self._upcoming_service

    @upcoming_service.setter
    def upcoming_service(self, upcoming_service: date):
        """Sets the upcoming_service of this Vehicle.


        :param upcoming_service: The upcoming_service of this Vehicle.
        :type upcoming_service: date
        """

        self._upcoming_service = upcoming_service

    @property
    def occupied_seats(self) -> int:
        """Gets the occupied_seats of this Vehicle.


        :return: The occupied_seats of this Vehicle.
        :rtype: int
        """
        return self._occupied_seats

    @occupied_seats.setter
    def occupied_seats(self, occupied_seats: int):
        """Sets the occupied_seats of this Vehicle.


        :param occupied_seats: The occupied_seats of this Vehicle.
        :type occupied_seats: int
        """

        self._occupied_seats = occupied_seats

    @property
    def child_seat_occupies_seat(self) -> int:
        """Gets the child_seat_occupies_seat of this Vehicle.


        :return: The child_seat_occupies_seat of this Vehicle.
        :rtype: int
        """
        return self._child_seat_occupies_seat

    @child_seat_occupies_seat.setter
    def child_seat_occupies_seat(self, child_seat_occupies_seat: int):
        """Sets the child_seat_occupies_seat of this Vehicle.


        :param child_seat_occupies_seat: The child_seat_occupies_seat of this Vehicle.
        :type child_seat_occupies_seat: int
        """

        self._child_seat_occupies_seat = child_seat_occupies_seat

    @property
    def consent_granted(self) -> bool:
        """Gets the consent_granted of this Vehicle.


        :return: The consent_granted of this Vehicle.
        :rtype: bool
        """
        return self._consent_granted

    @consent_granted.setter
    def consent_granted(self, consent_granted: bool):
        """Sets the consent_granted of this Vehicle.


        :param consent_granted: The consent_granted of this Vehicle.
        :type consent_granted: bool
        """

        self._consent_granted = consent_granted

    @property
    def plate_number(self) -> str:
        """Gets the plate_number of this Vehicle.


        :return: The plate_number of this Vehicle.
        :rtype: str
        """
        return self._plate_number

    @plate_number.setter
    def plate_number(self, plate_number: str):
        """Sets the plate_number of this Vehicle.


        :param plate_number: The plate_number of this Vehicle.
        :type plate_number: str
        """

        self._plate_number = plate_number

    @property
    def registration_date(self) -> date:
        """Gets the registration_date of this Vehicle.


        :return: The registration_date of this Vehicle.
        :rtype: date
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date: date):
        """Sets the registration_date of this Vehicle.


        :param registration_date: The registration_date of this Vehicle.
        :type registration_date: date
        """

        self._registration_date = registration_date

    @property
    def country_of_registration(self) -> str:
        """Gets the country_of_registration of this Vehicle.


        :return: The country_of_registration of this Vehicle.
        :rtype: str
        """
        return self._country_of_registration

    @country_of_registration.setter
    def country_of_registration(self, country_of_registration: str):
        """Sets the country_of_registration of this Vehicle.


        :param country_of_registration: The country_of_registration of this Vehicle.
        :type country_of_registration: str
        """

        self._country_of_registration = country_of_registration

    @property
    def chassis_number(self) -> str:
        """Gets the chassis_number of this Vehicle.


        :return: The chassis_number of this Vehicle.
        :rtype: str
        """
        return self._chassis_number

    @chassis_number.setter
    def chassis_number(self, chassis_number: str):
        """Sets the chassis_number of this Vehicle.


        :param chassis_number: The chassis_number of this Vehicle.
        :type chassis_number: str
        """

        self._chassis_number = chassis_number

    @property
    def vin(self) -> str:
        """Gets the vin of this Vehicle.


        :return: The vin of this Vehicle.
        :rtype: str
        """
        return self._vin

    @vin.setter
    def vin(self, vin: str):
        """Sets the vin of this Vehicle.


        :param vin: The vin of this Vehicle.
        :type vin: str
        """

        self._vin = vin

    @property
    def engine_number(self) -> str:
        """Gets the engine_number of this Vehicle.


        :return: The engine_number of this Vehicle.
        :rtype: str
        """
        return self._engine_number

    @engine_number.setter
    def engine_number(self, engine_number: str):
        """Sets the engine_number of this Vehicle.


        :param engine_number: The engine_number of this Vehicle.
        :type engine_number: str
        """

        self._engine_number = engine_number

    @property
    def vehicle_weight(self) -> float:
        """Gets the vehicle_weight of this Vehicle.


        :return: The vehicle_weight of this Vehicle.
        :rtype: float
        """
        return self._vehicle_weight

    @vehicle_weight.setter
    def vehicle_weight(self, vehicle_weight: float):
        """Sets the vehicle_weight of this Vehicle.


        :param vehicle_weight: The vehicle_weight of this Vehicle.
        :type vehicle_weight: float
        """

        self._vehicle_weight = vehicle_weight

    @property
    def agency_repair(self) -> bool:
        """Gets the agency_repair of this Vehicle.


        :return: The agency_repair of this Vehicle.
        :rtype: bool
        """
        return self._agency_repair

    @agency_repair.setter
    def agency_repair(self, agency_repair: bool):
        """Sets the agency_repair of this Vehicle.


        :param agency_repair: The agency_repair of this Vehicle.
        :type agency_repair: bool
        """

        self._agency_repair = agency_repair

    @property
    def body_type(self) -> str:
        """Gets the body_type of this Vehicle.


        :return: The body_type of this Vehicle.
        :rtype: str
        """
        return self._body_type

    @body_type.setter
    def body_type(self, body_type: str):
        """Sets the body_type of this Vehicle.


        :param body_type: The body_type of this Vehicle.
        :type body_type: str
        """

        self._body_type = body_type

    @property
    def fuel_type(self) -> str:
        """Gets the fuel_type of this Vehicle.


        :return: The fuel_type of this Vehicle.
        :rtype: str
        """
        return self._fuel_type

    @fuel_type.setter
    def fuel_type(self, fuel_type: str):
        """Sets the fuel_type of this Vehicle.


        :param fuel_type: The fuel_type of this Vehicle.
        :type fuel_type: str
        """

        self._fuel_type = fuel_type

    @property
    def ai_classification(self) -> str:
        """Gets the ai_classification of this Vehicle.


        :return: The ai_classification of this Vehicle.
        :rtype: str
        """
        return self._ai_classification

    @ai_classification.setter
    def ai_classification(self, ai_classification: str):
        """Sets the ai_classification of this Vehicle.


        :param ai_classification: The ai_classification of this Vehicle.
        :type ai_classification: str
        """

        self._ai_classification = ai_classification

    @property
    def vehicle_use(self) -> bool:
        """Gets the vehicle_use of this Vehicle.


        :return: The vehicle_use of this Vehicle.
        :rtype: bool
        """
        return self._vehicle_use

    @vehicle_use.setter
    def vehicle_use(self, vehicle_use: bool):
        """Sets the vehicle_use of this Vehicle.


        :param vehicle_use: The vehicle_use of this Vehicle.
        :type vehicle_use: bool
        """

        self._vehicle_use = vehicle_use

    @property
    def vehicle_garage(self) -> bool:
        """Gets the vehicle_garage of this Vehicle.


        :return: The vehicle_garage of this Vehicle.
        :rtype: bool
        """
        return self._vehicle_garage

    @vehicle_garage.setter
    def vehicle_garage(self, vehicle_garage: bool):
        """Sets the vehicle_garage of this Vehicle.


        :param vehicle_garage: The vehicle_garage of this Vehicle.
        :type vehicle_garage: bool
        """

        self._vehicle_garage = vehicle_garage

    @property
    def vehicle_brand(self) -> str:
        """Gets the vehicle_brand of this Vehicle.


        :return: The vehicle_brand of this Vehicle.
        :rtype: str
        """
        return self._vehicle_brand

    @vehicle_brand.setter
    def vehicle_brand(self, vehicle_brand: str):
        """Sets the vehicle_brand of this Vehicle.


        :param vehicle_brand: The vehicle_brand of this Vehicle.
        :type vehicle_brand: str
        """

        self._vehicle_brand = vehicle_brand

    @property
    def vehicle_model(self) -> str:
        """Gets the vehicle_model of this Vehicle.


        :return: The vehicle_model of this Vehicle.
        :rtype: str
        """
        return self._vehicle_model

    @vehicle_model.setter
    def vehicle_model(self, vehicle_model: str):
        """Sets the vehicle_model of this Vehicle.


        :param vehicle_model: The vehicle_model of this Vehicle.
        :type vehicle_model: str
        """

        self._vehicle_model = vehicle_model

    @property
    def seats(self) -> int:
        """Gets the seats of this Vehicle.


        :return: The seats of this Vehicle.
        :rtype: int
        """
        return self._seats

    @seats.setter
    def seats(self, seats: int):
        """Sets the seats of this Vehicle.


        :param seats: The seats of this Vehicle.
        :type seats: int
        """

        self._seats = seats

    @property
    def colour(self) -> str:
        """Gets the colour of this Vehicle.


        :return: The colour of this Vehicle.
        :rtype: str
        """
        return self._colour

    @colour.setter
    def colour(self, colour: str):
        """Sets the colour of this Vehicle.


        :param colour: The colour of this Vehicle.
        :type colour: str
        """

        self._colour = colour

    @property
    def sum_insured(self) -> float:
        """Gets the sum_insured of this Vehicle.


        :return: The sum_insured of this Vehicle.
        :rtype: float
        """
        return self._sum_insured

    @sum_insured.setter
    def sum_insured(self, sum_insured: float):
        """Sets the sum_insured of this Vehicle.


        :param sum_insured: The sum_insured of this Vehicle.
        :type sum_insured: float
        """

        self._sum_insured = sum_insured

    @property
    def accessories(self) -> str:
        """Gets the accessories of this Vehicle.


        :return: The accessories of this Vehicle.
        :rtype: str
        """
        return self._accessories

    @accessories.setter
    def accessories(self, accessories: str):
        """Sets the accessories of this Vehicle.


        :param accessories: The accessories of this Vehicle.
        :type accessories: str
        """

        self._accessories = accessories

    @property
    def accessory_value(self) -> str:
        """Gets the accessory_value of this Vehicle.


        :return: The accessory_value of this Vehicle.
        :rtype: str
        """
        return self._accessory_value

    @accessory_value.setter
    def accessory_value(self, accessory_value: str):
        """Sets the accessory_value of this Vehicle.


        :param accessory_value: The accessory_value of this Vehicle.
        :type accessory_value: str
        """

        self._accessory_value = accessory_value

    @property
    def co2_emissions(self) -> bool:
        """Gets the co2_emissions of this Vehicle.


        :return: The co2_emissions of this Vehicle.
        :rtype: bool
        """
        return self._co2_emissions

    @co2_emissions.setter
    def co2_emissions(self, co2_emissions: bool):
        """Sets the co2_emissions of this Vehicle.


        :param co2_emissions: The co2_emissions of this Vehicle.
        :type co2_emissions: bool
        """

        self._co2_emissions = co2_emissions

    @property
    def automatic_transmission(self) -> bool:
        """Gets the automatic_transmission of this Vehicle.


        :return: The automatic_transmission of this Vehicle.
        :rtype: bool
        """
        return self._automatic_transmission

    @automatic_transmission.setter
    def automatic_transmission(self, automatic_transmission: bool):
        """Sets the automatic_transmission of this Vehicle.


        :param automatic_transmission: The automatic_transmission of this Vehicle.
        :type automatic_transmission: bool
        """

        self._automatic_transmission = automatic_transmission

    @property
    def lefthand_drive(self) -> bool:
        """Gets the lefthand_drive of this Vehicle.


        :return: The lefthand_drive of this Vehicle.
        :rtype: bool
        """
        return self._lefthand_drive

    @lefthand_drive.setter
    def lefthand_drive(self, lefthand_drive: bool):
        """Sets the lefthand_drive of this Vehicle.


        :param lefthand_drive: The lefthand_drive of this Vehicle.
        :type lefthand_drive: bool
        """

        self._lefthand_drive = lefthand_drive

    @property
    def doors(self) -> int:
        """Gets the doors of this Vehicle.


        :return: The doors of this Vehicle.
        :rtype: int
        """
        return self._doors

    @doors.setter
    def doors(self, doors: int):
        """Sets the doors of this Vehicle.


        :param doors: The doors of this Vehicle.
        :type doors: int
        """

        self._doors = doors

    @property
    def security_device(self) -> bool:
        """Gets the security_device of this Vehicle.


        :return: The security_device of this Vehicle.
        :rtype: bool
        """
        return self._security_device

    @security_device.setter
    def security_device(self, security_device: bool):
        """Sets the security_device of this Vehicle.


        :param security_device: The security_device of this Vehicle.
        :type security_device: bool
        """

        self._security_device = security_device

    @property
    def modification(self) -> bool:
        """Gets the modification of this Vehicle.


        :return: The modification of this Vehicle.
        :rtype: bool
        """
        return self._modification

    @modification.setter
    def modification(self, modification: bool):
        """Sets the modification of this Vehicle.


        :param modification: The modification of this Vehicle.
        :type modification: bool
        """

        self._modification = modification

    @property
    def digital_key_used(self) -> bool:
        """Gets the digital_key_used of this Vehicle.


        :return: The digital_key_used of this Vehicle.
        :rtype: bool
        """
        return self._digital_key_used

    @digital_key_used.setter
    def digital_key_used(self, digital_key_used: bool):
        """Sets the digital_key_used of this Vehicle.


        :param digital_key_used: The digital_key_used of this Vehicle.
        :type digital_key_used: bool
        """

        self._digital_key_used = digital_key_used

    @property
    def blue_badge_adapted(self) -> bool:
        """Gets the blue_badge_adapted of this Vehicle.


        :return: The blue_badge_adapted of this Vehicle.
        :rtype: bool
        """
        return self._blue_badge_adapted

    @blue_badge_adapted.setter
    def blue_badge_adapted(self, blue_badge_adapted: bool):
        """Sets the blue_badge_adapted of this Vehicle.


        :param blue_badge_adapted: The blue_badge_adapted of this Vehicle.
        :type blue_badge_adapted: bool
        """

        self._blue_badge_adapted = blue_badge_adapted

    @property
    def distance_unit(self) -> str:
        """Gets the distance_unit of this Vehicle.


        :return: The distance_unit of this Vehicle.
        :rtype: str
        """
        return self._distance_unit

    @distance_unit.setter
    def distance_unit(self, distance_unit: str):
        """Sets the distance_unit of this Vehicle.


        :param distance_unit: The distance_unit of this Vehicle.
        :type distance_unit: str
        """

        self._distance_unit = distance_unit

    @property
    def pleasure_distance(self) -> float:
        """Gets the pleasure_distance of this Vehicle.


        :return: The pleasure_distance of this Vehicle.
        :rtype: float
        """
        return self._pleasure_distance

    @pleasure_distance.setter
    def pleasure_distance(self, pleasure_distance: float):
        """Sets the pleasure_distance of this Vehicle.


        :param pleasure_distance: The pleasure_distance of this Vehicle.
        :type pleasure_distance: float
        """

        self._pleasure_distance = pleasure_distance

    @property
    def business_distance(self) -> float:
        """Gets the business_distance of this Vehicle.


        :return: The business_distance of this Vehicle.
        :rtype: float
        """
        return self._business_distance

    @business_distance.setter
    def business_distance(self, business_distance: float):
        """Sets the business_distance of this Vehicle.


        :param business_distance: The business_distance of this Vehicle.
        :type business_distance: float
        """

        self._business_distance = business_distance

    @property
    def current_mileage(self) -> int:
        """Gets the current_mileage of this Vehicle.


        :return: The current_mileage of this Vehicle.
        :rtype: int
        """
        return self._current_mileage

    @current_mileage.setter
    def current_mileage(self, current_mileage: int):
        """Sets the current_mileage of this Vehicle.


        :param current_mileage: The current_mileage of this Vehicle.
        :type current_mileage: int
        """

        self._current_mileage = current_mileage

    @property
    def yearly_milage(self) -> int:
        """Gets the yearly_milage of this Vehicle.


        :return: The yearly_milage of this Vehicle.
        :rtype: int
        """
        return self._yearly_milage

    @yearly_milage.setter
    def yearly_milage(self, yearly_milage: int):
        """Sets the yearly_milage of this Vehicle.


        :param yearly_milage: The yearly_milage of this Vehicle.
        :type yearly_milage: int
        """

        self._yearly_milage = yearly_milage
