# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MedicalCondition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, notifiable_condition: str=None, status: str=None, medical_dvla_restriction: str=None, medical_treatment: str=None, bypass_operation: bool=None, insulin_injected: bool=None, daily_insulin_units: float=None):  # noqa: E501
        """MedicalCondition - a model defined in Swagger

        :param notifiable_condition: The notifiable_condition of this MedicalCondition.  # noqa: E501
        :type notifiable_condition: str
        :param status: The status of this MedicalCondition.  # noqa: E501
        :type status: str
        :param medical_dvla_restriction: The medical_dvla_restriction of this MedicalCondition.  # noqa: E501
        :type medical_dvla_restriction: str
        :param medical_treatment: The medical_treatment of this MedicalCondition.  # noqa: E501
        :type medical_treatment: str
        :param bypass_operation: The bypass_operation of this MedicalCondition.  # noqa: E501
        :type bypass_operation: bool
        :param insulin_injected: The insulin_injected of this MedicalCondition.  # noqa: E501
        :type insulin_injected: bool
        :param daily_insulin_units: The daily_insulin_units of this MedicalCondition.  # noqa: E501
        :type daily_insulin_units: float
        """
        self.swagger_types = {
            'notifiable_condition': str,
            'status': str,
            'medical_dvla_restriction': str,
            'medical_treatment': str,
            'bypass_operation': bool,
            'insulin_injected': bool,
            'daily_insulin_units': float
        }

        self.attribute_map = {
            'notifiable_condition': 'notifiable condition',
            'status': 'status',
            'medical_dvla_restriction': 'medical DVLA restriction',
            'medical_treatment': 'medical treatment',
            'bypass_operation': 'bypass Operation',
            'insulin_injected': 'insulin Injected',
            'daily_insulin_units': 'daily insulin units'
        }
        self._notifiable_condition = notifiable_condition
        self._status = status
        self._medical_dvla_restriction = medical_dvla_restriction
        self._medical_treatment = medical_treatment
        self._bypass_operation = bypass_operation
        self._insulin_injected = insulin_injected
        self._daily_insulin_units = daily_insulin_units

    @classmethod
    def from_dict(cls, dikt) -> 'MedicalCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The medicalCondition of this MedicalCondition.  # noqa: E501
        :rtype: MedicalCondition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notifiable_condition(self) -> str:
        """Gets the notifiable_condition of this MedicalCondition.


        :return: The notifiable_condition of this MedicalCondition.
        :rtype: str
        """
        return self._notifiable_condition

    @notifiable_condition.setter
    def notifiable_condition(self, notifiable_condition: str):
        """Sets the notifiable_condition of this MedicalCondition.


        :param notifiable_condition: The notifiable_condition of this MedicalCondition.
        :type notifiable_condition: str
        """

        self._notifiable_condition = notifiable_condition

    @property
    def status(self) -> str:
        """Gets the status of this MedicalCondition.


        :return: The status of this MedicalCondition.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this MedicalCondition.


        :param status: The status of this MedicalCondition.
        :type status: str
        """

        self._status = status

    @property
    def medical_dvla_restriction(self) -> str:
        """Gets the medical_dvla_restriction of this MedicalCondition.


        :return: The medical_dvla_restriction of this MedicalCondition.
        :rtype: str
        """
        return self._medical_dvla_restriction

    @medical_dvla_restriction.setter
    def medical_dvla_restriction(self, medical_dvla_restriction: str):
        """Sets the medical_dvla_restriction of this MedicalCondition.


        :param medical_dvla_restriction: The medical_dvla_restriction of this MedicalCondition.
        :type medical_dvla_restriction: str
        """

        self._medical_dvla_restriction = medical_dvla_restriction

    @property
    def medical_treatment(self) -> str:
        """Gets the medical_treatment of this MedicalCondition.


        :return: The medical_treatment of this MedicalCondition.
        :rtype: str
        """
        return self._medical_treatment

    @medical_treatment.setter
    def medical_treatment(self, medical_treatment: str):
        """Sets the medical_treatment of this MedicalCondition.


        :param medical_treatment: The medical_treatment of this MedicalCondition.
        :type medical_treatment: str
        """

        self._medical_treatment = medical_treatment

    @property
    def bypass_operation(self) -> bool:
        """Gets the bypass_operation of this MedicalCondition.


        :return: The bypass_operation of this MedicalCondition.
        :rtype: bool
        """
        return self._bypass_operation

    @bypass_operation.setter
    def bypass_operation(self, bypass_operation: bool):
        """Sets the bypass_operation of this MedicalCondition.


        :param bypass_operation: The bypass_operation of this MedicalCondition.
        :type bypass_operation: bool
        """

        self._bypass_operation = bypass_operation

    @property
    def insulin_injected(self) -> bool:
        """Gets the insulin_injected of this MedicalCondition.


        :return: The insulin_injected of this MedicalCondition.
        :rtype: bool
        """
        return self._insulin_injected

    @insulin_injected.setter
    def insulin_injected(self, insulin_injected: bool):
        """Sets the insulin_injected of this MedicalCondition.


        :param insulin_injected: The insulin_injected of this MedicalCondition.
        :type insulin_injected: bool
        """

        self._insulin_injected = insulin_injected

    @property
    def daily_insulin_units(self) -> float:
        """Gets the daily_insulin_units of this MedicalCondition.


        :return: The daily_insulin_units of this MedicalCondition.
        :rtype: float
        """
        return self._daily_insulin_units

    @daily_insulin_units.setter
    def daily_insulin_units(self, daily_insulin_units: float):
        """Sets the daily_insulin_units of this MedicalCondition.


        :param daily_insulin_units: The daily_insulin_units of this MedicalCondition.
        :type daily_insulin_units: float
        """

        self._daily_insulin_units = daily_insulin_units
